package me.gitai.smscodehelper.xposed;

import android.annotation.TargetApi;
import android.app.AndroidAppHelper;
import android.app.Application;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.os.UserHandle;
import android.provider.Telephony;
import android.telephony.SmsMessage;

import de.robv.android.xposed.IXposedHookLoadPackage;
import de.robv.android.xposed.XC_MethodHook;
import de.robv.android.xposed.XSharedPreferences;
import de.robv.android.xposed.XposedBridge;
import de.robv.android.xposed.XposedHelpers;
import de.robv.android.xposed.callbacks.XC_LoadPackage;
import me.gitai.library.utils.L;
import me.gitai.library.utils.SharedPreferencesUtil;
import me.gitai.library.utils.StringUtils;
import me.gitai.smscodehelper.BuildConfig;
import me.gitai.smscodehelper.Constant;
import me.gitai.smscodehelper.bean.MessageData;
import me.gitai.smscodehelper.utils.Captchas;

/**
 * Created by gitai on 16-2-27.
 */
public class SMSHandlerHook implements IXposedHookLoadPackage {
    private class ConstructorHook extends XC_MethodHook {
        @Override
        protected void afterHookedMethod(MethodHookParam param) throws Throwable {

        }
    }

    private class DispatchIntentHook extends XC_MethodHook {
        private final int mReceiverIndex;

        public DispatchIntentHook(int receiverIndex) {
            mReceiverIndex = receiverIndex;
        }

        @Override
        protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
            try {
                beforeDispatchIntentHandler(param, mReceiverIndex);
            } catch (Throwable e) {
                L.e("Error occurred in dispatchIntent() hook", e);
                throw e;
            }
        }
    }

    private void broadcastBlockedSms(Context context, MessageData message) {
        /*Intent intent = new Intent(BroadcastConsts.ACTION_RECEIVE_SMS);
        intent.putExtra(BroadcastConsts.EXTRA_MESSAGE, message);
        context.sendBroadcast(intent, BroadcastConsts.PERMISSION_RECEIVE_SMS);*/
    }

    private void finishSmsBroadcast(Object smsHandler, Object smsReceiver) {
        L.d("Removing raw SMS data from database");
        XposedHelpers.callMethod(smsHandler, "deleteFromRawTable",
                new Class<?>[] {String.class, String[].class},
                XposedHelpers.getObjectField(smsReceiver, "mDeleteWhere"),
                XposedHelpers.getObjectField(smsReceiver, "mDeleteWhereArgs"));

        L.d("Notifying completion of SMS broadcast");
        XposedHelpers.callMethod(smsHandler, "sendMessage",
                new Class<?>[] {int.class}, 3);
    }

    @TargetApi(19)
    private void beforeDispatchIntentHandler(XC_MethodHook.MethodHookParam param, int receiverIndex) {
        final Application app = AndroidAppHelper.currentApplication();
        L.setLogcatEnable(app, true);
        L.setXposedMode(true);
        SharedPreferencesUtil.initialize(app);

        Intent intent = (Intent)param.args[0];
        String action = intent.getAction();

        L.d(action);
        if (!Telephony.Sms.Intents.SMS_DELIVER_ACTION.equals(action)) {
            return;
        }

        // For some reason, caching the instance and calling reload() doesn't
        // update the values, so we have to create a new instance every time
        XSharedPreferences preferences = new XSharedPreferences(BuildConfig.APPLICATION_ID);
        if (!preferences.getBoolean(Constant.KEY_TASK_INTERCEPT, false)) {
            L.d("SMS blocking disabled in app preferences");
            return;
        }

        Object smsHandler = param.thisObject;
        Context context = (Context)XposedHelpers.getObjectField(smsHandler, "mContext");

        SmsMessage[] messageParts = Telephony.Sms.Intents.getMessagesFromIntent(intent);
        MessageData message = MessageData.createMessageData(messageParts);
        L.i("Received a new SMS message");
        L.v("  Sender: %s", message);

        MessageData message1 = new Captchas(context, message,
                preferences.getString(Constant.KEY_PARSE_KEYWORDS, Constant.KEY_PARSE_KEYWORDS_TEXT),
                preferences.getString(Constant.KEY_PARSE_AMBIGUITIES, Constant.KEY_PARSE_AMBIGUITIES_TEXT))
                .parseAuto();

        if (message1 != null && !StringUtils.isEmpty(message1.getCode())){
            Intent i =new Intent(Constant.ACTION_XPOSED);
            i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            i.putExtra(Constant.KEY_SMS_DATA, message1);
            context.sendBroadcast(i);
            L.i("  Result: Blocked");
            broadcastBlockedSms(context, message);
            param.setResult(null);
            finishSmsBroadcast(smsHandler, param.args[receiverIndex]);
        }else{
            L.i("  Result: Allowed");
        }
    }

    private void hookConstructor(XC_LoadPackage.LoadPackageParam lpparam) {
        String className = "com.android.internal.telephony.InboundSmsHandler";
        Class<?> param1Type = String.class;
        Class<?> param2Type = Context.class;
        String param3Type = "com.android.internal.telephony.SmsStorageMonitor";
        String param4Type = "com.android.internal.telephony.PhoneBase";
        String param5Type = "com.android.internal.telephony.CellBroadcastHandler";

        L.i("Hooking InboundSmsHandler constructor");

        XposedHelpers.findAndHookConstructor(className, lpparam.classLoader,
                param1Type, param2Type, param3Type, param4Type, param5Type, new ConstructorHook());
    }

    private void hookDispatchIntent19(XC_LoadPackage.LoadPackageParam lpparam) {
        String className = "com.android.internal.telephony.InboundSmsHandler";
        String methodName = "dispatchIntent";
        Class<?> param1Type = Intent.class;
        Class<?> param2Type = String.class;
        Class<?> param3Type = int.class;
        Class<?> param4Type = BroadcastReceiver.class;

        L.i("Hooking dispatchIntent() for Android v19+");

        XposedHelpers.findAndHookMethod(className, lpparam.classLoader, methodName,
                param1Type, param2Type, param3Type, param4Type, new DispatchIntentHook(3));
    }

    private void hookDispatchIntent21(XC_LoadPackage.LoadPackageParam lpparam) {
        String className = "com.android.internal.telephony.InboundSmsHandler";
        String methodName = "dispatchIntent";
        Class<?> param1Type = Intent.class;
        Class<?> param2Type = String.class;
        Class<?> param3Type = int.class;
        Class<?> param4Type = BroadcastReceiver.class;
        Class<?> param5Type = UserHandle.class;

        L.i("Hooking dispatchIntent() for Android v21+");

        XposedHelpers.findAndHookMethod(className, lpparam.classLoader, methodName,
                param1Type, param2Type, param3Type, param4Type, param5Type, new DispatchIntentHook(3));
    }

    private void hookDispatchIntent23(XC_LoadPackage.LoadPackageParam lpparam) {
        String className = "com.android.internal.telephony.InboundSmsHandler";
        String methodName = "dispatchIntent";
        Class<?> param1Type = Intent.class;
        Class<?> param2Type = String.class;
        Class<?> param3Type = int.class;
        Class<?> param4Type = Bundle.class;
        Class<?> param5Type = BroadcastReceiver.class;
        Class<?> param6Type = UserHandle.class;

        L.i("Hooking dispatchIntent() for Android v23+");

        XposedHelpers.findAndHookMethod(className, lpparam.classLoader, methodName,
                param1Type, param2Type, param3Type, param4Type, param5Type, param6Type, new DispatchIntentHook(4));
    }

    private void hookSmsHandler(XC_LoadPackage.LoadPackageParam lpparam) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            hookConstructor(lpparam);
            hookDispatchIntent23(lpparam);
        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            hookConstructor(lpparam);
            hookDispatchIntent21(lpparam);
        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            hookConstructor(lpparam);
            hookDispatchIntent19(lpparam);
        } else {
            throw new UnsupportedOperationException("Captcha is only supported on Android 4.4+");
        }
    }

    private static void printDeviceInfo() {
        L.i("Phone manufacturer: %s", Build.MANUFACTURER);
        L.i("Phone model: %s", Build.MODEL);
        L.i("Android version: %s", Build.VERSION.RELEASE);
        L.i("Xposed bridge version: %d", XposedBridge.XPOSED_BRIDGE_VERSION);
        L.i("Captcha version: %s (%d)", BuildConfig.VERSION_NAME, BuildConfig.VERSION_CODE);
    }

    @Override
    public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpparam) throws Throwable {
        if ("com.android.phone".equals(lpparam.packageName)) {
            L.i("Captcha initializing...");
            printDeviceInfo();
            try {
                hookSmsHandler(lpparam);
            } catch (Throwable e) {
                L.e("Failed to hook SMS handler", e);
                throw e;
            }
            L.i("Captcha initialization complete!");
        }
    }
}
