/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package me.gitai.kanban.data;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-04-18")
public class QQMessage implements org.apache.thrift.TBase<QQMessage, QQMessage._Fields>, java.io.Serializable, Cloneable, Comparable<QQMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QQMessage");

  private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField _STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("_status", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField EXT_INT_FIELD_DESC = new org.apache.thrift.protocol.TField("extInt", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField EXT_LONG_FIELD_DESC = new org.apache.thrift.protocol.TField("extLong", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField EXT_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("extStr", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EXTRAFLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("extraflag", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField FRIENDUIN_FIELD_DESC = new org.apache.thrift.protocol.TField("frienduin", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IS_VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("isValid", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField ISREAD_FIELD_DESC = new org.apache.thrift.protocol.TField("isread", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField ISSEND_FIELD_DESC = new org.apache.thrift.protocol.TField("issend", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ISTROOP_FIELD_DESC = new org.apache.thrift.protocol.TField("istroop", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField LONG_MSG_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("longMsgCount", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField LONG_MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("longMsgId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField LONG_MSG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("longMsgIndex", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField MSG_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("msgData", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("msgId", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField MSG_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("msgUid", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField MSGSEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("msgseq", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField MSGTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("msgtype", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField SELFUIN_FIELD_DESC = new org.apache.thrift.protocol.TField("selfuin", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField SEND_FAIL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sendFailCode", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField SENDERUIN_FIELD_DESC = new org.apache.thrift.protocol.TField("senderuin", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField SHMSGSEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("shmsgseq", org.apache.thrift.protocol.TType.I64, (short)24);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)25);
  private static final org.apache.thrift.protocol.TField UNISEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("uniseq", org.apache.thrift.protocol.TType.I64, (short)26);
  private static final org.apache.thrift.protocol.TField VERSION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("versionCode", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField VIP_BUBBLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vipBubbleID", org.apache.thrift.protocol.TType.I64, (short)28);
  private static final org.apache.thrift.protocol.TField ACT_MSG_CONTENT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("actMsgContentValue", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField BIZ_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bizType", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField COUNTER_FIELD_DESC = new org.apache.thrift.protocol.TField("counter", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField EMO_RECENT_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("emoRecentMsg", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSize", org.apache.thrift.protocol.TType.I64, (short)34);
  private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileType", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField HAS_REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("hasReply", org.apache.thrift.protocol.TType.BOOL, (short)36);
  private static final org.apache.thrift.protocol.TField IS_CACHE_VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("isCacheValid", org.apache.thrift.protocol.TType.BOOL, (short)37);
  private static final org.apache.thrift.protocol.TField IS_IN_WHISPER_FIELD_DESC = new org.apache.thrift.protocol.TField("isInWhisper", org.apache.thrift.protocol.TType.BOOL, (short)38);
  private static final org.apache.thrift.protocol.TField LATEST_NORMAL_MSG_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("latestNormalMsgString", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickName", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField PTT_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("pttUrl", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField SHARE_APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shareAppID", org.apache.thrift.protocol.TType.I64, (short)42);
  private static final org.apache.thrift.protocol.TField UN_READ_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("unReadNum", org.apache.thrift.protocol.TType.I32, (short)43);
  private static final org.apache.thrift.protocol.TField SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("summary", org.apache.thrift.protocol.TType.STRING, (short)44);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new QQMessageStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new QQMessageTupleSchemeFactory();

  public long _id; // required
  public int _status; // required
  public int extInt; // required
  public int extLong; // required
  public String extStr; // required
  public int extraflag; // required
  public String frienduin; // required
  public boolean isValid; // required
  public boolean isread; // required
  public int issend; // required
  public int istroop; // required
  public int longMsgCount; // required
  public int longMsgId; // required
  public int longMsgIndex; // required
  public String msg; // required
  public ByteBuffer msgData; // required
  public long msgId; // required
  public long msgUid; // required
  public long msgseq; // required
  public int msgtype; // required
  public String selfuin; // required
  public int sendFailCode; // required
  public String senderuin; // required
  public long shmsgseq; // required
  public long time; // required
  public long uniseq; // required
  public int versionCode; // required
  public long vipBubbleID; // required
  public String actMsgContentValue; // required
  public String action; // required
  public int bizType; // required
  public int counter; // required
  public String emoRecentMsg; // required
  public long fileSize; // required
  public int fileType; // required
  public boolean hasReply; // required
  public boolean isCacheValid; // required
  public boolean isInWhisper; // required
  public String latestNormalMsgString; // required
  public String nickName; // required
  public String pttUrl; // required
  public long shareAppID; // required
  public int unReadNum; // required
  public String summary; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _ID((short)1, "_id"),
    _STATUS((short)2, "_status"),
    EXT_INT((short)3, "extInt"),
    EXT_LONG((short)4, "extLong"),
    EXT_STR((short)5, "extStr"),
    EXTRAFLAG((short)6, "extraflag"),
    FRIENDUIN((short)7, "frienduin"),
    IS_VALID((short)8, "isValid"),
    ISREAD((short)9, "isread"),
    ISSEND((short)10, "issend"),
    ISTROOP((short)11, "istroop"),
    LONG_MSG_COUNT((short)12, "longMsgCount"),
    LONG_MSG_ID((short)13, "longMsgId"),
    LONG_MSG_INDEX((short)14, "longMsgIndex"),
    MSG((short)15, "msg"),
    MSG_DATA((short)16, "msgData"),
    MSG_ID((short)17, "msgId"),
    MSG_UID((short)18, "msgUid"),
    MSGSEQ((short)19, "msgseq"),
    MSGTYPE((short)20, "msgtype"),
    SELFUIN((short)21, "selfuin"),
    SEND_FAIL_CODE((short)22, "sendFailCode"),
    SENDERUIN((short)23, "senderuin"),
    SHMSGSEQ((short)24, "shmsgseq"),
    TIME((short)25, "time"),
    UNISEQ((short)26, "uniseq"),
    VERSION_CODE((short)27, "versionCode"),
    VIP_BUBBLE_ID((short)28, "vipBubbleID"),
    ACT_MSG_CONTENT_VALUE((short)29, "actMsgContentValue"),
    ACTION((short)30, "action"),
    BIZ_TYPE((short)31, "bizType"),
    COUNTER((short)32, "counter"),
    EMO_RECENT_MSG((short)33, "emoRecentMsg"),
    FILE_SIZE((short)34, "fileSize"),
    FILE_TYPE((short)35, "fileType"),
    HAS_REPLY((short)36, "hasReply"),
    IS_CACHE_VALID((short)37, "isCacheValid"),
    IS_IN_WHISPER((short)38, "isInWhisper"),
    LATEST_NORMAL_MSG_STRING((short)39, "latestNormalMsgString"),
    NICK_NAME((short)40, "nickName"),
    PTT_URL((short)41, "pttUrl"),
    SHARE_APP_ID((short)42, "shareAppID"),
    UN_READ_NUM((short)43, "unReadNum"),
    SUMMARY((short)44, "summary");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _ID
          return _ID;
        case 2: // _STATUS
          return _STATUS;
        case 3: // EXT_INT
          return EXT_INT;
        case 4: // EXT_LONG
          return EXT_LONG;
        case 5: // EXT_STR
          return EXT_STR;
        case 6: // EXTRAFLAG
          return EXTRAFLAG;
        case 7: // FRIENDUIN
          return FRIENDUIN;
        case 8: // IS_VALID
          return IS_VALID;
        case 9: // ISREAD
          return ISREAD;
        case 10: // ISSEND
          return ISSEND;
        case 11: // ISTROOP
          return ISTROOP;
        case 12: // LONG_MSG_COUNT
          return LONG_MSG_COUNT;
        case 13: // LONG_MSG_ID
          return LONG_MSG_ID;
        case 14: // LONG_MSG_INDEX
          return LONG_MSG_INDEX;
        case 15: // MSG
          return MSG;
        case 16: // MSG_DATA
          return MSG_DATA;
        case 17: // MSG_ID
          return MSG_ID;
        case 18: // MSG_UID
          return MSG_UID;
        case 19: // MSGSEQ
          return MSGSEQ;
        case 20: // MSGTYPE
          return MSGTYPE;
        case 21: // SELFUIN
          return SELFUIN;
        case 22: // SEND_FAIL_CODE
          return SEND_FAIL_CODE;
        case 23: // SENDERUIN
          return SENDERUIN;
        case 24: // SHMSGSEQ
          return SHMSGSEQ;
        case 25: // TIME
          return TIME;
        case 26: // UNISEQ
          return UNISEQ;
        case 27: // VERSION_CODE
          return VERSION_CODE;
        case 28: // VIP_BUBBLE_ID
          return VIP_BUBBLE_ID;
        case 29: // ACT_MSG_CONTENT_VALUE
          return ACT_MSG_CONTENT_VALUE;
        case 30: // ACTION
          return ACTION;
        case 31: // BIZ_TYPE
          return BIZ_TYPE;
        case 32: // COUNTER
          return COUNTER;
        case 33: // EMO_RECENT_MSG
          return EMO_RECENT_MSG;
        case 34: // FILE_SIZE
          return FILE_SIZE;
        case 35: // FILE_TYPE
          return FILE_TYPE;
        case 36: // HAS_REPLY
          return HAS_REPLY;
        case 37: // IS_CACHE_VALID
          return IS_CACHE_VALID;
        case 38: // IS_IN_WHISPER
          return IS_IN_WHISPER;
        case 39: // LATEST_NORMAL_MSG_STRING
          return LATEST_NORMAL_MSG_STRING;
        case 40: // NICK_NAME
          return NICK_NAME;
        case 41: // PTT_URL
          return PTT_URL;
        case 42: // SHARE_APP_ID
          return SHARE_APP_ID;
        case 43: // UN_READ_NUM
          return UN_READ_NUM;
        case 44: // SUMMARY
          return SUMMARY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___ID_ISSET_ID = 0;
  private static final int ___STATUS_ISSET_ID = 1;
  private static final int __EXTINT_ISSET_ID = 2;
  private static final int __EXTLONG_ISSET_ID = 3;
  private static final int __EXTRAFLAG_ISSET_ID = 4;
  private static final int __ISVALID_ISSET_ID = 5;
  private static final int __ISREAD_ISSET_ID = 6;
  private static final int __ISSEND_ISSET_ID = 7;
  private static final int __ISTROOP_ISSET_ID = 8;
  private static final int __LONGMSGCOUNT_ISSET_ID = 9;
  private static final int __LONGMSGID_ISSET_ID = 10;
  private static final int __LONGMSGINDEX_ISSET_ID = 11;
  private static final int __MSGID_ISSET_ID = 12;
  private static final int __MSGUID_ISSET_ID = 13;
  private static final int __MSGSEQ_ISSET_ID = 14;
  private static final int __MSGTYPE_ISSET_ID = 15;
  private static final int __SENDFAILCODE_ISSET_ID = 16;
  private static final int __SHMSGSEQ_ISSET_ID = 17;
  private static final int __TIME_ISSET_ID = 18;
  private static final int __UNISEQ_ISSET_ID = 19;
  private static final int __VERSIONCODE_ISSET_ID = 20;
  private static final int __VIPBUBBLEID_ISSET_ID = 21;
  private static final int __BIZTYPE_ISSET_ID = 22;
  private static final int __COUNTER_ISSET_ID = 23;
  private static final int __FILESIZE_ISSET_ID = 24;
  private static final int __FILETYPE_ISSET_ID = 25;
  private static final int __HASREPLY_ISSET_ID = 26;
  private static final int __ISCACHEVALID_ISSET_ID = 27;
  private static final int __ISINWHISPER_ISSET_ID = 28;
  private static final int __SHAREAPPID_ISSET_ID = 29;
  private static final int __UNREADNUM_ISSET_ID = 30;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields._STATUS, new org.apache.thrift.meta_data.FieldMetaData("_status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.EXT_INT, new org.apache.thrift.meta_data.FieldMetaData("extInt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.EXT_LONG, new org.apache.thrift.meta_data.FieldMetaData("extLong", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.EXT_STR, new org.apache.thrift.meta_data.FieldMetaData("extStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.EXTRAFLAG, new org.apache.thrift.meta_data.FieldMetaData("extraflag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.FRIENDUIN, new org.apache.thrift.meta_data.FieldMetaData("frienduin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.IS_VALID, new org.apache.thrift.meta_data.FieldMetaData("isValid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL        , "boolean")));
    tmpMap.put(_Fields.ISREAD, new org.apache.thrift.meta_data.FieldMetaData("isread", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL        , "boolean")));
    tmpMap.put(_Fields.ISSEND, new org.apache.thrift.meta_data.FieldMetaData("issend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ISTROOP, new org.apache.thrift.meta_data.FieldMetaData("istroop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.LONG_MSG_COUNT, new org.apache.thrift.meta_data.FieldMetaData("longMsgCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.LONG_MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("longMsgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.LONG_MSG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("longMsgIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.MSG_DATA, new org.apache.thrift.meta_data.FieldMetaData("msgData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("msgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.MSG_UID, new org.apache.thrift.meta_data.FieldMetaData("msgUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.MSGSEQ, new org.apache.thrift.meta_data.FieldMetaData("msgseq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.MSGTYPE, new org.apache.thrift.meta_data.FieldMetaData("msgtype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.SELFUIN, new org.apache.thrift.meta_data.FieldMetaData("selfuin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.SEND_FAIL_CODE, new org.apache.thrift.meta_data.FieldMetaData("sendFailCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.SENDERUIN, new org.apache.thrift.meta_data.FieldMetaData("senderuin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.SHMSGSEQ, new org.apache.thrift.meta_data.FieldMetaData("shmsgseq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.UNISEQ, new org.apache.thrift.meta_data.FieldMetaData("uniseq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.VERSION_CODE, new org.apache.thrift.meta_data.FieldMetaData("versionCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.VIP_BUBBLE_ID, new org.apache.thrift.meta_data.FieldMetaData("vipBubbleID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.ACT_MSG_CONTENT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("actMsgContentValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.BIZ_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bizType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.COUNTER, new org.apache.thrift.meta_data.FieldMetaData("counter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.EMO_RECENT_MSG, new org.apache.thrift.meta_data.FieldMetaData("emoRecentMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fileSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.HAS_REPLY, new org.apache.thrift.meta_data.FieldMetaData("hasReply", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL        , "boolean")));
    tmpMap.put(_Fields.IS_CACHE_VALID, new org.apache.thrift.meta_data.FieldMetaData("isCacheValid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL        , "boolean")));
    tmpMap.put(_Fields.IS_IN_WHISPER, new org.apache.thrift.meta_data.FieldMetaData("isInWhisper", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL        , "boolean")));
    tmpMap.put(_Fields.LATEST_NORMAL_MSG_STRING, new org.apache.thrift.meta_data.FieldMetaData("latestNormalMsgString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("nickName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.PTT_URL, new org.apache.thrift.meta_data.FieldMetaData("pttUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.SHARE_APP_ID, new org.apache.thrift.meta_data.FieldMetaData("shareAppID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.UN_READ_NUM, new org.apache.thrift.meta_data.FieldMetaData("unReadNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("summary", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QQMessage.class, metaDataMap);
  }

  public QQMessage() {
    this.extInt = -1;

    this.extLong = -1;

  }

  public QQMessage(
    long _id,
    int _status,
    int extInt,
    int extLong,
    String extStr,
    int extraflag,
    String frienduin,
    boolean isValid,
    boolean isread,
    int issend,
    int istroop,
    int longMsgCount,
    int longMsgId,
    int longMsgIndex,
    String msg,
    ByteBuffer msgData,
    long msgId,
    long msgUid,
    long msgseq,
    int msgtype,
    String selfuin,
    int sendFailCode,
    String senderuin,
    long shmsgseq,
    long time,
    long uniseq,
    int versionCode,
    long vipBubbleID,
    String actMsgContentValue,
    String action,
    int bizType,
    int counter,
    String emoRecentMsg,
    long fileSize,
    int fileType,
    boolean hasReply,
    boolean isCacheValid,
    boolean isInWhisper,
    String latestNormalMsgString,
    String nickName,
    String pttUrl,
    long shareAppID,
    int unReadNum,
    String summary)
  {
    this();
    this._id = _id;
    set_idIsSet(true);
    this._status = _status;
    set_statusIsSet(true);
    this.extInt = extInt;
    setExtIntIsSet(true);
    this.extLong = extLong;
    setExtLongIsSet(true);
    this.extStr = extStr;
    this.extraflag = extraflag;
    setExtraflagIsSet(true);
    this.frienduin = frienduin;
    this.isValid = isValid;
    setIsValidIsSet(true);
    this.isread = isread;
    setIsreadIsSet(true);
    this.issend = issend;
    setIssendIsSet(true);
    this.istroop = istroop;
    setIstroopIsSet(true);
    this.longMsgCount = longMsgCount;
    setLongMsgCountIsSet(true);
    this.longMsgId = longMsgId;
    setLongMsgIdIsSet(true);
    this.longMsgIndex = longMsgIndex;
    setLongMsgIndexIsSet(true);
    this.msg = msg;
    this.msgData = org.apache.thrift.TBaseHelper.copyBinary(msgData);
    this.msgId = msgId;
    setMsgIdIsSet(true);
    this.msgUid = msgUid;
    setMsgUidIsSet(true);
    this.msgseq = msgseq;
    setMsgseqIsSet(true);
    this.msgtype = msgtype;
    setMsgtypeIsSet(true);
    this.selfuin = selfuin;
    this.sendFailCode = sendFailCode;
    setSendFailCodeIsSet(true);
    this.senderuin = senderuin;
    this.shmsgseq = shmsgseq;
    setShmsgseqIsSet(true);
    this.time = time;
    setTimeIsSet(true);
    this.uniseq = uniseq;
    setUniseqIsSet(true);
    this.versionCode = versionCode;
    setVersionCodeIsSet(true);
    this.vipBubbleID = vipBubbleID;
    setVipBubbleIDIsSet(true);
    this.actMsgContentValue = actMsgContentValue;
    this.action = action;
    this.bizType = bizType;
    setBizTypeIsSet(true);
    this.counter = counter;
    setCounterIsSet(true);
    this.emoRecentMsg = emoRecentMsg;
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    this.fileType = fileType;
    setFileTypeIsSet(true);
    this.hasReply = hasReply;
    setHasReplyIsSet(true);
    this.isCacheValid = isCacheValid;
    setIsCacheValidIsSet(true);
    this.isInWhisper = isInWhisper;
    setIsInWhisperIsSet(true);
    this.latestNormalMsgString = latestNormalMsgString;
    this.nickName = nickName;
    this.pttUrl = pttUrl;
    this.shareAppID = shareAppID;
    setShareAppIDIsSet(true);
    this.unReadNum = unReadNum;
    setUnReadNumIsSet(true);
    this.summary = summary;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QQMessage(QQMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    this._id = other._id;
    this._status = other._status;
    this.extInt = other.extInt;
    this.extLong = other.extLong;
    if (other.isSetExtStr()) {
      this.extStr = other.extStr;
    }
    this.extraflag = other.extraflag;
    if (other.isSetFrienduin()) {
      this.frienduin = other.frienduin;
    }
    this.isValid = other.isValid;
    this.isread = other.isread;
    this.issend = other.issend;
    this.istroop = other.istroop;
    this.longMsgCount = other.longMsgCount;
    this.longMsgId = other.longMsgId;
    this.longMsgIndex = other.longMsgIndex;
    if (other.isSetMsg()) {
      this.msg = other.msg;
    }
    if (other.isSetMsgData()) {
      this.msgData = org.apache.thrift.TBaseHelper.copyBinary(other.msgData);
    }
    this.msgId = other.msgId;
    this.msgUid = other.msgUid;
    this.msgseq = other.msgseq;
    this.msgtype = other.msgtype;
    if (other.isSetSelfuin()) {
      this.selfuin = other.selfuin;
    }
    this.sendFailCode = other.sendFailCode;
    if (other.isSetSenderuin()) {
      this.senderuin = other.senderuin;
    }
    this.shmsgseq = other.shmsgseq;
    this.time = other.time;
    this.uniseq = other.uniseq;
    this.versionCode = other.versionCode;
    this.vipBubbleID = other.vipBubbleID;
    if (other.isSetActMsgContentValue()) {
      this.actMsgContentValue = other.actMsgContentValue;
    }
    if (other.isSetAction()) {
      this.action = other.action;
    }
    this.bizType = other.bizType;
    this.counter = other.counter;
    if (other.isSetEmoRecentMsg()) {
      this.emoRecentMsg = other.emoRecentMsg;
    }
    this.fileSize = other.fileSize;
    this.fileType = other.fileType;
    this.hasReply = other.hasReply;
    this.isCacheValid = other.isCacheValid;
    this.isInWhisper = other.isInWhisper;
    if (other.isSetLatestNormalMsgString()) {
      this.latestNormalMsgString = other.latestNormalMsgString;
    }
    if (other.isSetNickName()) {
      this.nickName = other.nickName;
    }
    if (other.isSetPttUrl()) {
      this.pttUrl = other.pttUrl;
    }
    this.shareAppID = other.shareAppID;
    this.unReadNum = other.unReadNum;
    if (other.isSetSummary()) {
      this.summary = other.summary;
    }
  }

  public QQMessage deepCopy() {
    return new QQMessage(this);
  }

  @Override
  public void clear() {
    set_idIsSet(false);
    this._id = 0;
    set_statusIsSet(false);
    this._status = 0;
    this.extInt = -1;

    this.extLong = -1;

    this.extStr = null;
    setExtraflagIsSet(false);
    this.extraflag = 0;
    this.frienduin = null;
    setIsValidIsSet(false);
    this.isValid = false;
    setIsreadIsSet(false);
    this.isread = false;
    setIssendIsSet(false);
    this.issend = 0;
    setIstroopIsSet(false);
    this.istroop = 0;
    setLongMsgCountIsSet(false);
    this.longMsgCount = 0;
    setLongMsgIdIsSet(false);
    this.longMsgId = 0;
    setLongMsgIndexIsSet(false);
    this.longMsgIndex = 0;
    this.msg = null;
    this.msgData = null;
    setMsgIdIsSet(false);
    this.msgId = 0;
    setMsgUidIsSet(false);
    this.msgUid = 0;
    setMsgseqIsSet(false);
    this.msgseq = 0;
    setMsgtypeIsSet(false);
    this.msgtype = 0;
    this.selfuin = null;
    setSendFailCodeIsSet(false);
    this.sendFailCode = 0;
    this.senderuin = null;
    setShmsgseqIsSet(false);
    this.shmsgseq = 0;
    setTimeIsSet(false);
    this.time = 0;
    setUniseqIsSet(false);
    this.uniseq = 0;
    setVersionCodeIsSet(false);
    this.versionCode = 0;
    setVipBubbleIDIsSet(false);
    this.vipBubbleID = 0;
    this.actMsgContentValue = null;
    this.action = null;
    setBizTypeIsSet(false);
    this.bizType = 0;
    setCounterIsSet(false);
    this.counter = 0;
    this.emoRecentMsg = null;
    setFileSizeIsSet(false);
    this.fileSize = 0;
    setFileTypeIsSet(false);
    this.fileType = 0;
    setHasReplyIsSet(false);
    this.hasReply = false;
    setIsCacheValidIsSet(false);
    this.isCacheValid = false;
    setIsInWhisperIsSet(false);
    this.isInWhisper = false;
    this.latestNormalMsgString = null;
    this.nickName = null;
    this.pttUrl = null;
    setShareAppIDIsSet(false);
    this.shareAppID = 0;
    setUnReadNumIsSet(false);
    this.unReadNum = 0;
    this.summary = null;
  }

  public long get_id() {
    return this._id;
  }

  public QQMessage set_id(long _id) {
    this._id = _id;
    set_idIsSet(true);
    return this;
  }

  public void unset_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___ID_ISSET_ID);
  }

  /** Returns true if field _id is set (has been assigned a value) and false otherwise */
  public boolean isSet_id() {
    return EncodingUtils.testBit(__isset_bitfield, ___ID_ISSET_ID);
  }

  public void set_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___ID_ISSET_ID, value);
  }

  public int get_status() {
    return this._status;
  }

  public QQMessage set_status(int _status) {
    this._status = _status;
    set_statusIsSet(true);
    return this;
  }

  public void unset_status() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___STATUS_ISSET_ID);
  }

  /** Returns true if field _status is set (has been assigned a value) and false otherwise */
  public boolean isSet_status() {
    return EncodingUtils.testBit(__isset_bitfield, ___STATUS_ISSET_ID);
  }

  public void set_statusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___STATUS_ISSET_ID, value);
  }

  public int getExtInt() {
    return this.extInt;
  }

  public QQMessage setExtInt(int extInt) {
    this.extInt = extInt;
    setExtIntIsSet(true);
    return this;
  }

  public void unsetExtInt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTINT_ISSET_ID);
  }

  /** Returns true if field extInt is set (has been assigned a value) and false otherwise */
  public boolean isSetExtInt() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTINT_ISSET_ID);
  }

  public void setExtIntIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTINT_ISSET_ID, value);
  }

  public int getExtLong() {
    return this.extLong;
  }

  public QQMessage setExtLong(int extLong) {
    this.extLong = extLong;
    setExtLongIsSet(true);
    return this;
  }

  public void unsetExtLong() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTLONG_ISSET_ID);
  }

  /** Returns true if field extLong is set (has been assigned a value) and false otherwise */
  public boolean isSetExtLong() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTLONG_ISSET_ID);
  }

  public void setExtLongIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTLONG_ISSET_ID, value);
  }

  public String getExtStr() {
    return this.extStr;
  }

  public QQMessage setExtStr(String extStr) {
    this.extStr = extStr;
    return this;
  }

  public void unsetExtStr() {
    this.extStr = null;
  }

  /** Returns true if field extStr is set (has been assigned a value) and false otherwise */
  public boolean isSetExtStr() {
    return this.extStr != null;
  }

  public void setExtStrIsSet(boolean value) {
    if (!value) {
      this.extStr = null;
    }
  }

  public int getExtraflag() {
    return this.extraflag;
  }

  public QQMessage setExtraflag(int extraflag) {
    this.extraflag = extraflag;
    setExtraflagIsSet(true);
    return this;
  }

  public void unsetExtraflag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTRAFLAG_ISSET_ID);
  }

  /** Returns true if field extraflag is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraflag() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTRAFLAG_ISSET_ID);
  }

  public void setExtraflagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTRAFLAG_ISSET_ID, value);
  }

  public String getFrienduin() {
    return this.frienduin;
  }

  public QQMessage setFrienduin(String frienduin) {
    this.frienduin = frienduin;
    return this;
  }

  public void unsetFrienduin() {
    this.frienduin = null;
  }

  /** Returns true if field frienduin is set (has been assigned a value) and false otherwise */
  public boolean isSetFrienduin() {
    return this.frienduin != null;
  }

  public void setFrienduinIsSet(boolean value) {
    if (!value) {
      this.frienduin = null;
    }
  }

  public boolean isIsValid() {
    return this.isValid;
  }

  public QQMessage setIsValid(boolean isValid) {
    this.isValid = isValid;
    setIsValidIsSet(true);
    return this;
  }

  public void unsetIsValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISVALID_ISSET_ID);
  }

  /** Returns true if field isValid is set (has been assigned a value) and false otherwise */
  public boolean isSetIsValid() {
    return EncodingUtils.testBit(__isset_bitfield, __ISVALID_ISSET_ID);
  }

  public void setIsValidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISVALID_ISSET_ID, value);
  }

  public boolean isIsread() {
    return this.isread;
  }

  public QQMessage setIsread(boolean isread) {
    this.isread = isread;
    setIsreadIsSet(true);
    return this;
  }

  public void unsetIsread() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISREAD_ISSET_ID);
  }

  /** Returns true if field isread is set (has been assigned a value) and false otherwise */
  public boolean isSetIsread() {
    return EncodingUtils.testBit(__isset_bitfield, __ISREAD_ISSET_ID);
  }

  public void setIsreadIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISREAD_ISSET_ID, value);
  }

  public int getIssend() {
    return this.issend;
  }

  public QQMessage setIssend(int issend) {
    this.issend = issend;
    setIssendIsSet(true);
    return this;
  }

  public void unsetIssend() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSEND_ISSET_ID);
  }

  /** Returns true if field issend is set (has been assigned a value) and false otherwise */
  public boolean isSetIssend() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSEND_ISSET_ID);
  }

  public void setIssendIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSEND_ISSET_ID, value);
  }

  public int getIstroop() {
    return this.istroop;
  }

  public QQMessage setIstroop(int istroop) {
    this.istroop = istroop;
    setIstroopIsSet(true);
    return this;
  }

  public void unsetIstroop() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISTROOP_ISSET_ID);
  }

  /** Returns true if field istroop is set (has been assigned a value) and false otherwise */
  public boolean isSetIstroop() {
    return EncodingUtils.testBit(__isset_bitfield, __ISTROOP_ISSET_ID);
  }

  public void setIstroopIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISTROOP_ISSET_ID, value);
  }

  public int getLongMsgCount() {
    return this.longMsgCount;
  }

  public QQMessage setLongMsgCount(int longMsgCount) {
    this.longMsgCount = longMsgCount;
    setLongMsgCountIsSet(true);
    return this;
  }

  public void unsetLongMsgCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGMSGCOUNT_ISSET_ID);
  }

  /** Returns true if field longMsgCount is set (has been assigned a value) and false otherwise */
  public boolean isSetLongMsgCount() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGMSGCOUNT_ISSET_ID);
  }

  public void setLongMsgCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGMSGCOUNT_ISSET_ID, value);
  }

  public int getLongMsgId() {
    return this.longMsgId;
  }

  public QQMessage setLongMsgId(int longMsgId) {
    this.longMsgId = longMsgId;
    setLongMsgIdIsSet(true);
    return this;
  }

  public void unsetLongMsgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGMSGID_ISSET_ID);
  }

  /** Returns true if field longMsgId is set (has been assigned a value) and false otherwise */
  public boolean isSetLongMsgId() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGMSGID_ISSET_ID);
  }

  public void setLongMsgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGMSGID_ISSET_ID, value);
  }

  public int getLongMsgIndex() {
    return this.longMsgIndex;
  }

  public QQMessage setLongMsgIndex(int longMsgIndex) {
    this.longMsgIndex = longMsgIndex;
    setLongMsgIndexIsSet(true);
    return this;
  }

  public void unsetLongMsgIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGMSGINDEX_ISSET_ID);
  }

  /** Returns true if field longMsgIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetLongMsgIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGMSGINDEX_ISSET_ID);
  }

  public void setLongMsgIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGMSGINDEX_ISSET_ID, value);
  }

  public String getMsg() {
    return this.msg;
  }

  public QQMessage setMsg(String msg) {
    this.msg = msg;
    return this;
  }

  public void unsetMsg() {
    this.msg = null;
  }

  /** Returns true if field msg is set (has been assigned a value) and false otherwise */
  public boolean isSetMsg() {
    return this.msg != null;
  }

  public void setMsgIsSet(boolean value) {
    if (!value) {
      this.msg = null;
    }
  }

  public byte[] getMsgData() {
    setMsgData(org.apache.thrift.TBaseHelper.rightSize(msgData));
    return msgData == null ? null : msgData.array();
  }

  public ByteBuffer bufferForMsgData() {
    return org.apache.thrift.TBaseHelper.copyBinary(msgData);
  }

  public QQMessage setMsgData(byte[] msgData) {
    this.msgData = msgData == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(msgData, msgData.length));
    return this;
  }

  public QQMessage setMsgData(ByteBuffer msgData) {
    this.msgData = org.apache.thrift.TBaseHelper.copyBinary(msgData);
    return this;
  }

  public void unsetMsgData() {
    this.msgData = null;
  }

  /** Returns true if field msgData is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgData() {
    return this.msgData != null;
  }

  public void setMsgDataIsSet(boolean value) {
    if (!value) {
      this.msgData = null;
    }
  }

  public long getMsgId() {
    return this.msgId;
  }

  public QQMessage setMsgId(long msgId) {
    this.msgId = msgId;
    setMsgIdIsSet(true);
    return this;
  }

  public void unsetMsgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSGID_ISSET_ID);
  }

  /** Returns true if field msgId is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgId() {
    return EncodingUtils.testBit(__isset_bitfield, __MSGID_ISSET_ID);
  }

  public void setMsgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSGID_ISSET_ID, value);
  }

  public long getMsgUid() {
    return this.msgUid;
  }

  public QQMessage setMsgUid(long msgUid) {
    this.msgUid = msgUid;
    setMsgUidIsSet(true);
    return this;
  }

  public void unsetMsgUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSGUID_ISSET_ID);
  }

  /** Returns true if field msgUid is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgUid() {
    return EncodingUtils.testBit(__isset_bitfield, __MSGUID_ISSET_ID);
  }

  public void setMsgUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSGUID_ISSET_ID, value);
  }

  public long getMsgseq() {
    return this.msgseq;
  }

  public QQMessage setMsgseq(long msgseq) {
    this.msgseq = msgseq;
    setMsgseqIsSet(true);
    return this;
  }

  public void unsetMsgseq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSGSEQ_ISSET_ID);
  }

  /** Returns true if field msgseq is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgseq() {
    return EncodingUtils.testBit(__isset_bitfield, __MSGSEQ_ISSET_ID);
  }

  public void setMsgseqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSGSEQ_ISSET_ID, value);
  }

  public int getMsgtype() {
    return this.msgtype;
  }

  public QQMessage setMsgtype(int msgtype) {
    this.msgtype = msgtype;
    setMsgtypeIsSet(true);
    return this;
  }

  public void unsetMsgtype() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSGTYPE_ISSET_ID);
  }

  /** Returns true if field msgtype is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgtype() {
    return EncodingUtils.testBit(__isset_bitfield, __MSGTYPE_ISSET_ID);
  }

  public void setMsgtypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSGTYPE_ISSET_ID, value);
  }

  public String getSelfuin() {
    return this.selfuin;
  }

  public QQMessage setSelfuin(String selfuin) {
    this.selfuin = selfuin;
    return this;
  }

  public void unsetSelfuin() {
    this.selfuin = null;
  }

  /** Returns true if field selfuin is set (has been assigned a value) and false otherwise */
  public boolean isSetSelfuin() {
    return this.selfuin != null;
  }

  public void setSelfuinIsSet(boolean value) {
    if (!value) {
      this.selfuin = null;
    }
  }

  public int getSendFailCode() {
    return this.sendFailCode;
  }

  public QQMessage setSendFailCode(int sendFailCode) {
    this.sendFailCode = sendFailCode;
    setSendFailCodeIsSet(true);
    return this;
  }

  public void unsetSendFailCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDFAILCODE_ISSET_ID);
  }

  /** Returns true if field sendFailCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSendFailCode() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDFAILCODE_ISSET_ID);
  }

  public void setSendFailCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDFAILCODE_ISSET_ID, value);
  }

  public String getSenderuin() {
    return this.senderuin;
  }

  public QQMessage setSenderuin(String senderuin) {
    this.senderuin = senderuin;
    return this;
  }

  public void unsetSenderuin() {
    this.senderuin = null;
  }

  /** Returns true if field senderuin is set (has been assigned a value) and false otherwise */
  public boolean isSetSenderuin() {
    return this.senderuin != null;
  }

  public void setSenderuinIsSet(boolean value) {
    if (!value) {
      this.senderuin = null;
    }
  }

  public long getShmsgseq() {
    return this.shmsgseq;
  }

  public QQMessage setShmsgseq(long shmsgseq) {
    this.shmsgseq = shmsgseq;
    setShmsgseqIsSet(true);
    return this;
  }

  public void unsetShmsgseq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHMSGSEQ_ISSET_ID);
  }

  /** Returns true if field shmsgseq is set (has been assigned a value) and false otherwise */
  public boolean isSetShmsgseq() {
    return EncodingUtils.testBit(__isset_bitfield, __SHMSGSEQ_ISSET_ID);
  }

  public void setShmsgseqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHMSGSEQ_ISSET_ID, value);
  }

  public long getTime() {
    return this.time;
  }

  public QQMessage setTime(long time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public long getUniseq() {
    return this.uniseq;
  }

  public QQMessage setUniseq(long uniseq) {
    this.uniseq = uniseq;
    setUniseqIsSet(true);
    return this;
  }

  public void unsetUniseq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNISEQ_ISSET_ID);
  }

  /** Returns true if field uniseq is set (has been assigned a value) and false otherwise */
  public boolean isSetUniseq() {
    return EncodingUtils.testBit(__isset_bitfield, __UNISEQ_ISSET_ID);
  }

  public void setUniseqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNISEQ_ISSET_ID, value);
  }

  public int getVersionCode() {
    return this.versionCode;
  }

  public QQMessage setVersionCode(int versionCode) {
    this.versionCode = versionCode;
    setVersionCodeIsSet(true);
    return this;
  }

  public void unsetVersionCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSIONCODE_ISSET_ID);
  }

  /** Returns true if field versionCode is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionCode() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSIONCODE_ISSET_ID);
  }

  public void setVersionCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSIONCODE_ISSET_ID, value);
  }

  public long getVipBubbleID() {
    return this.vipBubbleID;
  }

  public QQMessage setVipBubbleID(long vipBubbleID) {
    this.vipBubbleID = vipBubbleID;
    setVipBubbleIDIsSet(true);
    return this;
  }

  public void unsetVipBubbleID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPBUBBLEID_ISSET_ID);
  }

  /** Returns true if field vipBubbleID is set (has been assigned a value) and false otherwise */
  public boolean isSetVipBubbleID() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPBUBBLEID_ISSET_ID);
  }

  public void setVipBubbleIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPBUBBLEID_ISSET_ID, value);
  }

  public String getActMsgContentValue() {
    return this.actMsgContentValue;
  }

  public QQMessage setActMsgContentValue(String actMsgContentValue) {
    this.actMsgContentValue = actMsgContentValue;
    return this;
  }

  public void unsetActMsgContentValue() {
    this.actMsgContentValue = null;
  }

  /** Returns true if field actMsgContentValue is set (has been assigned a value) and false otherwise */
  public boolean isSetActMsgContentValue() {
    return this.actMsgContentValue != null;
  }

  public void setActMsgContentValueIsSet(boolean value) {
    if (!value) {
      this.actMsgContentValue = null;
    }
  }

  public String getAction() {
    return this.action;
  }

  public QQMessage setAction(String action) {
    this.action = action;
    return this;
  }

  public void unsetAction() {
    this.action = null;
  }

  /** Returns true if field action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return this.action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      this.action = null;
    }
  }

  public int getBizType() {
    return this.bizType;
  }

  public QQMessage setBizType(int bizType) {
    this.bizType = bizType;
    setBizTypeIsSet(true);
    return this;
  }

  public void unsetBizType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIZTYPE_ISSET_ID);
  }

  /** Returns true if field bizType is set (has been assigned a value) and false otherwise */
  public boolean isSetBizType() {
    return EncodingUtils.testBit(__isset_bitfield, __BIZTYPE_ISSET_ID);
  }

  public void setBizTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIZTYPE_ISSET_ID, value);
  }

  public int getCounter() {
    return this.counter;
  }

  public QQMessage setCounter(int counter) {
    this.counter = counter;
    setCounterIsSet(true);
    return this;
  }

  public void unsetCounter() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTER_ISSET_ID);
  }

  /** Returns true if field counter is set (has been assigned a value) and false otherwise */
  public boolean isSetCounter() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNTER_ISSET_ID);
  }

  public void setCounterIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTER_ISSET_ID, value);
  }

  public String getEmoRecentMsg() {
    return this.emoRecentMsg;
  }

  public QQMessage setEmoRecentMsg(String emoRecentMsg) {
    this.emoRecentMsg = emoRecentMsg;
    return this;
  }

  public void unsetEmoRecentMsg() {
    this.emoRecentMsg = null;
  }

  /** Returns true if field emoRecentMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetEmoRecentMsg() {
    return this.emoRecentMsg != null;
  }

  public void setEmoRecentMsgIsSet(boolean value) {
    if (!value) {
      this.emoRecentMsg = null;
    }
  }

  public long getFileSize() {
    return this.fileSize;
  }

  public QQMessage setFileSize(long fileSize) {
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    return this;
  }

  public void unsetFileSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  /** Returns true if field fileSize is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSize() {
    return EncodingUtils.testBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  public void setFileSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILESIZE_ISSET_ID, value);
  }

  public int getFileType() {
    return this.fileType;
  }

  public QQMessage setFileType(int fileType) {
    this.fileType = fileType;
    setFileTypeIsSet(true);
    return this;
  }

  public void unsetFileType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILETYPE_ISSET_ID);
  }

  /** Returns true if field fileType is set (has been assigned a value) and false otherwise */
  public boolean isSetFileType() {
    return EncodingUtils.testBit(__isset_bitfield, __FILETYPE_ISSET_ID);
  }

  public void setFileTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILETYPE_ISSET_ID, value);
  }

  public boolean isHasReply() {
    return this.hasReply;
  }

  public QQMessage setHasReply(boolean hasReply) {
    this.hasReply = hasReply;
    setHasReplyIsSet(true);
    return this;
  }

  public void unsetHasReply() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASREPLY_ISSET_ID);
  }

  /** Returns true if field hasReply is set (has been assigned a value) and false otherwise */
  public boolean isSetHasReply() {
    return EncodingUtils.testBit(__isset_bitfield, __HASREPLY_ISSET_ID);
  }

  public void setHasReplyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASREPLY_ISSET_ID, value);
  }

  public boolean isIsCacheValid() {
    return this.isCacheValid;
  }

  public QQMessage setIsCacheValid(boolean isCacheValid) {
    this.isCacheValid = isCacheValid;
    setIsCacheValidIsSet(true);
    return this;
  }

  public void unsetIsCacheValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCACHEVALID_ISSET_ID);
  }

  /** Returns true if field isCacheValid is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCacheValid() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCACHEVALID_ISSET_ID);
  }

  public void setIsCacheValidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCACHEVALID_ISSET_ID, value);
  }

  public boolean isIsInWhisper() {
    return this.isInWhisper;
  }

  public QQMessage setIsInWhisper(boolean isInWhisper) {
    this.isInWhisper = isInWhisper;
    setIsInWhisperIsSet(true);
    return this;
  }

  public void unsetIsInWhisper() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISINWHISPER_ISSET_ID);
  }

  /** Returns true if field isInWhisper is set (has been assigned a value) and false otherwise */
  public boolean isSetIsInWhisper() {
    return EncodingUtils.testBit(__isset_bitfield, __ISINWHISPER_ISSET_ID);
  }

  public void setIsInWhisperIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISINWHISPER_ISSET_ID, value);
  }

  public String getLatestNormalMsgString() {
    return this.latestNormalMsgString;
  }

  public QQMessage setLatestNormalMsgString(String latestNormalMsgString) {
    this.latestNormalMsgString = latestNormalMsgString;
    return this;
  }

  public void unsetLatestNormalMsgString() {
    this.latestNormalMsgString = null;
  }

  /** Returns true if field latestNormalMsgString is set (has been assigned a value) and false otherwise */
  public boolean isSetLatestNormalMsgString() {
    return this.latestNormalMsgString != null;
  }

  public void setLatestNormalMsgStringIsSet(boolean value) {
    if (!value) {
      this.latestNormalMsgString = null;
    }
  }

  public String getNickName() {
    return this.nickName;
  }

  public QQMessage setNickName(String nickName) {
    this.nickName = nickName;
    return this;
  }

  public void unsetNickName() {
    this.nickName = null;
  }

  /** Returns true if field nickName is set (has been assigned a value) and false otherwise */
  public boolean isSetNickName() {
    return this.nickName != null;
  }

  public void setNickNameIsSet(boolean value) {
    if (!value) {
      this.nickName = null;
    }
  }

  public String getPttUrl() {
    return this.pttUrl;
  }

  public QQMessage setPttUrl(String pttUrl) {
    this.pttUrl = pttUrl;
    return this;
  }

  public void unsetPttUrl() {
    this.pttUrl = null;
  }

  /** Returns true if field pttUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetPttUrl() {
    return this.pttUrl != null;
  }

  public void setPttUrlIsSet(boolean value) {
    if (!value) {
      this.pttUrl = null;
    }
  }

  public long getShareAppID() {
    return this.shareAppID;
  }

  public QQMessage setShareAppID(long shareAppID) {
    this.shareAppID = shareAppID;
    setShareAppIDIsSet(true);
    return this;
  }

  public void unsetShareAppID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHAREAPPID_ISSET_ID);
  }

  /** Returns true if field shareAppID is set (has been assigned a value) and false otherwise */
  public boolean isSetShareAppID() {
    return EncodingUtils.testBit(__isset_bitfield, __SHAREAPPID_ISSET_ID);
  }

  public void setShareAppIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHAREAPPID_ISSET_ID, value);
  }

  public int getUnReadNum() {
    return this.unReadNum;
  }

  public QQMessage setUnReadNum(int unReadNum) {
    this.unReadNum = unReadNum;
    setUnReadNumIsSet(true);
    return this;
  }

  public void unsetUnReadNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNREADNUM_ISSET_ID);
  }

  /** Returns true if field unReadNum is set (has been assigned a value) and false otherwise */
  public boolean isSetUnReadNum() {
    return EncodingUtils.testBit(__isset_bitfield, __UNREADNUM_ISSET_ID);
  }

  public void setUnReadNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNREADNUM_ISSET_ID, value);
  }

  public String getSummary() {
    return this.summary;
  }

  public QQMessage setSummary(String summary) {
    this.summary = summary;
    return this;
  }

  public void unsetSummary() {
    this.summary = null;
  }

  /** Returns true if field summary is set (has been assigned a value) and false otherwise */
  public boolean isSetSummary() {
    return this.summary != null;
  }

  public void setSummaryIsSet(boolean value) {
    if (!value) {
      this.summary = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _ID:
      if (value == null) {
        unset_id();
      } else {
        set_id((Long)value);
      }
      break;

    case _STATUS:
      if (value == null) {
        unset_status();
      } else {
        set_status((Integer)value);
      }
      break;

    case EXT_INT:
      if (value == null) {
        unsetExtInt();
      } else {
        setExtInt((Integer)value);
      }
      break;

    case EXT_LONG:
      if (value == null) {
        unsetExtLong();
      } else {
        setExtLong((Integer)value);
      }
      break;

    case EXT_STR:
      if (value == null) {
        unsetExtStr();
      } else {
        setExtStr((String)value);
      }
      break;

    case EXTRAFLAG:
      if (value == null) {
        unsetExtraflag();
      } else {
        setExtraflag((Integer)value);
      }
      break;

    case FRIENDUIN:
      if (value == null) {
        unsetFrienduin();
      } else {
        setFrienduin((String)value);
      }
      break;

    case IS_VALID:
      if (value == null) {
        unsetIsValid();
      } else {
        setIsValid((Boolean)value);
      }
      break;

    case ISREAD:
      if (value == null) {
        unsetIsread();
      } else {
        setIsread((Boolean)value);
      }
      break;

    case ISSEND:
      if (value == null) {
        unsetIssend();
      } else {
        setIssend((Integer)value);
      }
      break;

    case ISTROOP:
      if (value == null) {
        unsetIstroop();
      } else {
        setIstroop((Integer)value);
      }
      break;

    case LONG_MSG_COUNT:
      if (value == null) {
        unsetLongMsgCount();
      } else {
        setLongMsgCount((Integer)value);
      }
      break;

    case LONG_MSG_ID:
      if (value == null) {
        unsetLongMsgId();
      } else {
        setLongMsgId((Integer)value);
      }
      break;

    case LONG_MSG_INDEX:
      if (value == null) {
        unsetLongMsgIndex();
      } else {
        setLongMsgIndex((Integer)value);
      }
      break;

    case MSG:
      if (value == null) {
        unsetMsg();
      } else {
        setMsg((String)value);
      }
      break;

    case MSG_DATA:
      if (value == null) {
        unsetMsgData();
      } else {
        if (value instanceof byte[]) {
          setMsgData((byte[])value);
        } else {
          setMsgData((ByteBuffer)value);
        }
      }
      break;

    case MSG_ID:
      if (value == null) {
        unsetMsgId();
      } else {
        setMsgId((Long)value);
      }
      break;

    case MSG_UID:
      if (value == null) {
        unsetMsgUid();
      } else {
        setMsgUid((Long)value);
      }
      break;

    case MSGSEQ:
      if (value == null) {
        unsetMsgseq();
      } else {
        setMsgseq((Long)value);
      }
      break;

    case MSGTYPE:
      if (value == null) {
        unsetMsgtype();
      } else {
        setMsgtype((Integer)value);
      }
      break;

    case SELFUIN:
      if (value == null) {
        unsetSelfuin();
      } else {
        setSelfuin((String)value);
      }
      break;

    case SEND_FAIL_CODE:
      if (value == null) {
        unsetSendFailCode();
      } else {
        setSendFailCode((Integer)value);
      }
      break;

    case SENDERUIN:
      if (value == null) {
        unsetSenderuin();
      } else {
        setSenderuin((String)value);
      }
      break;

    case SHMSGSEQ:
      if (value == null) {
        unsetShmsgseq();
      } else {
        setShmsgseq((Long)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Long)value);
      }
      break;

    case UNISEQ:
      if (value == null) {
        unsetUniseq();
      } else {
        setUniseq((Long)value);
      }
      break;

    case VERSION_CODE:
      if (value == null) {
        unsetVersionCode();
      } else {
        setVersionCode((Integer)value);
      }
      break;

    case VIP_BUBBLE_ID:
      if (value == null) {
        unsetVipBubbleID();
      } else {
        setVipBubbleID((Long)value);
      }
      break;

    case ACT_MSG_CONTENT_VALUE:
      if (value == null) {
        unsetActMsgContentValue();
      } else {
        setActMsgContentValue((String)value);
      }
      break;

    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((String)value);
      }
      break;

    case BIZ_TYPE:
      if (value == null) {
        unsetBizType();
      } else {
        setBizType((Integer)value);
      }
      break;

    case COUNTER:
      if (value == null) {
        unsetCounter();
      } else {
        setCounter((Integer)value);
      }
      break;

    case EMO_RECENT_MSG:
      if (value == null) {
        unsetEmoRecentMsg();
      } else {
        setEmoRecentMsg((String)value);
      }
      break;

    case FILE_SIZE:
      if (value == null) {
        unsetFileSize();
      } else {
        setFileSize((Long)value);
      }
      break;

    case FILE_TYPE:
      if (value == null) {
        unsetFileType();
      } else {
        setFileType((Integer)value);
      }
      break;

    case HAS_REPLY:
      if (value == null) {
        unsetHasReply();
      } else {
        setHasReply((Boolean)value);
      }
      break;

    case IS_CACHE_VALID:
      if (value == null) {
        unsetIsCacheValid();
      } else {
        setIsCacheValid((Boolean)value);
      }
      break;

    case IS_IN_WHISPER:
      if (value == null) {
        unsetIsInWhisper();
      } else {
        setIsInWhisper((Boolean)value);
      }
      break;

    case LATEST_NORMAL_MSG_STRING:
      if (value == null) {
        unsetLatestNormalMsgString();
      } else {
        setLatestNormalMsgString((String)value);
      }
      break;

    case NICK_NAME:
      if (value == null) {
        unsetNickName();
      } else {
        setNickName((String)value);
      }
      break;

    case PTT_URL:
      if (value == null) {
        unsetPttUrl();
      } else {
        setPttUrl((String)value);
      }
      break;

    case SHARE_APP_ID:
      if (value == null) {
        unsetShareAppID();
      } else {
        setShareAppID((Long)value);
      }
      break;

    case UN_READ_NUM:
      if (value == null) {
        unsetUnReadNum();
      } else {
        setUnReadNum((Integer)value);
      }
      break;

    case SUMMARY:
      if (value == null) {
        unsetSummary();
      } else {
        setSummary((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _ID:
      return get_id();

    case _STATUS:
      return get_status();

    case EXT_INT:
      return getExtInt();

    case EXT_LONG:
      return getExtLong();

    case EXT_STR:
      return getExtStr();

    case EXTRAFLAG:
      return getExtraflag();

    case FRIENDUIN:
      return getFrienduin();

    case IS_VALID:
      return isIsValid();

    case ISREAD:
      return isIsread();

    case ISSEND:
      return getIssend();

    case ISTROOP:
      return getIstroop();

    case LONG_MSG_COUNT:
      return getLongMsgCount();

    case LONG_MSG_ID:
      return getLongMsgId();

    case LONG_MSG_INDEX:
      return getLongMsgIndex();

    case MSG:
      return getMsg();

    case MSG_DATA:
      return getMsgData();

    case MSG_ID:
      return getMsgId();

    case MSG_UID:
      return getMsgUid();

    case MSGSEQ:
      return getMsgseq();

    case MSGTYPE:
      return getMsgtype();

    case SELFUIN:
      return getSelfuin();

    case SEND_FAIL_CODE:
      return getSendFailCode();

    case SENDERUIN:
      return getSenderuin();

    case SHMSGSEQ:
      return getShmsgseq();

    case TIME:
      return getTime();

    case UNISEQ:
      return getUniseq();

    case VERSION_CODE:
      return getVersionCode();

    case VIP_BUBBLE_ID:
      return getVipBubbleID();

    case ACT_MSG_CONTENT_VALUE:
      return getActMsgContentValue();

    case ACTION:
      return getAction();

    case BIZ_TYPE:
      return getBizType();

    case COUNTER:
      return getCounter();

    case EMO_RECENT_MSG:
      return getEmoRecentMsg();

    case FILE_SIZE:
      return getFileSize();

    case FILE_TYPE:
      return getFileType();

    case HAS_REPLY:
      return isHasReply();

    case IS_CACHE_VALID:
      return isIsCacheValid();

    case IS_IN_WHISPER:
      return isIsInWhisper();

    case LATEST_NORMAL_MSG_STRING:
      return getLatestNormalMsgString();

    case NICK_NAME:
      return getNickName();

    case PTT_URL:
      return getPttUrl();

    case SHARE_APP_ID:
      return getShareAppID();

    case UN_READ_NUM:
      return getUnReadNum();

    case SUMMARY:
      return getSummary();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _ID:
      return isSet_id();
    case _STATUS:
      return isSet_status();
    case EXT_INT:
      return isSetExtInt();
    case EXT_LONG:
      return isSetExtLong();
    case EXT_STR:
      return isSetExtStr();
    case EXTRAFLAG:
      return isSetExtraflag();
    case FRIENDUIN:
      return isSetFrienduin();
    case IS_VALID:
      return isSetIsValid();
    case ISREAD:
      return isSetIsread();
    case ISSEND:
      return isSetIssend();
    case ISTROOP:
      return isSetIstroop();
    case LONG_MSG_COUNT:
      return isSetLongMsgCount();
    case LONG_MSG_ID:
      return isSetLongMsgId();
    case LONG_MSG_INDEX:
      return isSetLongMsgIndex();
    case MSG:
      return isSetMsg();
    case MSG_DATA:
      return isSetMsgData();
    case MSG_ID:
      return isSetMsgId();
    case MSG_UID:
      return isSetMsgUid();
    case MSGSEQ:
      return isSetMsgseq();
    case MSGTYPE:
      return isSetMsgtype();
    case SELFUIN:
      return isSetSelfuin();
    case SEND_FAIL_CODE:
      return isSetSendFailCode();
    case SENDERUIN:
      return isSetSenderuin();
    case SHMSGSEQ:
      return isSetShmsgseq();
    case TIME:
      return isSetTime();
    case UNISEQ:
      return isSetUniseq();
    case VERSION_CODE:
      return isSetVersionCode();
    case VIP_BUBBLE_ID:
      return isSetVipBubbleID();
    case ACT_MSG_CONTENT_VALUE:
      return isSetActMsgContentValue();
    case ACTION:
      return isSetAction();
    case BIZ_TYPE:
      return isSetBizType();
    case COUNTER:
      return isSetCounter();
    case EMO_RECENT_MSG:
      return isSetEmoRecentMsg();
    case FILE_SIZE:
      return isSetFileSize();
    case FILE_TYPE:
      return isSetFileType();
    case HAS_REPLY:
      return isSetHasReply();
    case IS_CACHE_VALID:
      return isSetIsCacheValid();
    case IS_IN_WHISPER:
      return isSetIsInWhisper();
    case LATEST_NORMAL_MSG_STRING:
      return isSetLatestNormalMsgString();
    case NICK_NAME:
      return isSetNickName();
    case PTT_URL:
      return isSetPttUrl();
    case SHARE_APP_ID:
      return isSetShareAppID();
    case UN_READ_NUM:
      return isSetUnReadNum();
    case SUMMARY:
      return isSetSummary();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QQMessage)
      return this.equals((QQMessage)that);
    return false;
  }

  public boolean equals(QQMessage that) {
    if (that == null)
      return false;

    boolean this_present__id = true;
    boolean that_present__id = true;
    if (this_present__id || that_present__id) {
      if (!(this_present__id && that_present__id))
        return false;
      if (this._id != that._id)
        return false;
    }

    boolean this_present__status = true;
    boolean that_present__status = true;
    if (this_present__status || that_present__status) {
      if (!(this_present__status && that_present__status))
        return false;
      if (this._status != that._status)
        return false;
    }

    boolean this_present_extInt = true;
    boolean that_present_extInt = true;
    if (this_present_extInt || that_present_extInt) {
      if (!(this_present_extInt && that_present_extInt))
        return false;
      if (this.extInt != that.extInt)
        return false;
    }

    boolean this_present_extLong = true;
    boolean that_present_extLong = true;
    if (this_present_extLong || that_present_extLong) {
      if (!(this_present_extLong && that_present_extLong))
        return false;
      if (this.extLong != that.extLong)
        return false;
    }

    boolean this_present_extStr = true && this.isSetExtStr();
    boolean that_present_extStr = true && that.isSetExtStr();
    if (this_present_extStr || that_present_extStr) {
      if (!(this_present_extStr && that_present_extStr))
        return false;
      if (!this.extStr.equals(that.extStr))
        return false;
    }

    boolean this_present_extraflag = true;
    boolean that_present_extraflag = true;
    if (this_present_extraflag || that_present_extraflag) {
      if (!(this_present_extraflag && that_present_extraflag))
        return false;
      if (this.extraflag != that.extraflag)
        return false;
    }

    boolean this_present_frienduin = true && this.isSetFrienduin();
    boolean that_present_frienduin = true && that.isSetFrienduin();
    if (this_present_frienduin || that_present_frienduin) {
      if (!(this_present_frienduin && that_present_frienduin))
        return false;
      if (!this.frienduin.equals(that.frienduin))
        return false;
    }

    boolean this_present_isValid = true;
    boolean that_present_isValid = true;
    if (this_present_isValid || that_present_isValid) {
      if (!(this_present_isValid && that_present_isValid))
        return false;
      if (this.isValid != that.isValid)
        return false;
    }

    boolean this_present_isread = true;
    boolean that_present_isread = true;
    if (this_present_isread || that_present_isread) {
      if (!(this_present_isread && that_present_isread))
        return false;
      if (this.isread != that.isread)
        return false;
    }

    boolean this_present_issend = true;
    boolean that_present_issend = true;
    if (this_present_issend || that_present_issend) {
      if (!(this_present_issend && that_present_issend))
        return false;
      if (this.issend != that.issend)
        return false;
    }

    boolean this_present_istroop = true;
    boolean that_present_istroop = true;
    if (this_present_istroop || that_present_istroop) {
      if (!(this_present_istroop && that_present_istroop))
        return false;
      if (this.istroop != that.istroop)
        return false;
    }

    boolean this_present_longMsgCount = true;
    boolean that_present_longMsgCount = true;
    if (this_present_longMsgCount || that_present_longMsgCount) {
      if (!(this_present_longMsgCount && that_present_longMsgCount))
        return false;
      if (this.longMsgCount != that.longMsgCount)
        return false;
    }

    boolean this_present_longMsgId = true;
    boolean that_present_longMsgId = true;
    if (this_present_longMsgId || that_present_longMsgId) {
      if (!(this_present_longMsgId && that_present_longMsgId))
        return false;
      if (this.longMsgId != that.longMsgId)
        return false;
    }

    boolean this_present_longMsgIndex = true;
    boolean that_present_longMsgIndex = true;
    if (this_present_longMsgIndex || that_present_longMsgIndex) {
      if (!(this_present_longMsgIndex && that_present_longMsgIndex))
        return false;
      if (this.longMsgIndex != that.longMsgIndex)
        return false;
    }

    boolean this_present_msg = true && this.isSetMsg();
    boolean that_present_msg = true && that.isSetMsg();
    if (this_present_msg || that_present_msg) {
      if (!(this_present_msg && that_present_msg))
        return false;
      if (!this.msg.equals(that.msg))
        return false;
    }

    boolean this_present_msgData = true && this.isSetMsgData();
    boolean that_present_msgData = true && that.isSetMsgData();
    if (this_present_msgData || that_present_msgData) {
      if (!(this_present_msgData && that_present_msgData))
        return false;
      if (!this.msgData.equals(that.msgData))
        return false;
    }

    boolean this_present_msgId = true;
    boolean that_present_msgId = true;
    if (this_present_msgId || that_present_msgId) {
      if (!(this_present_msgId && that_present_msgId))
        return false;
      if (this.msgId != that.msgId)
        return false;
    }

    boolean this_present_msgUid = true;
    boolean that_present_msgUid = true;
    if (this_present_msgUid || that_present_msgUid) {
      if (!(this_present_msgUid && that_present_msgUid))
        return false;
      if (this.msgUid != that.msgUid)
        return false;
    }

    boolean this_present_msgseq = true;
    boolean that_present_msgseq = true;
    if (this_present_msgseq || that_present_msgseq) {
      if (!(this_present_msgseq && that_present_msgseq))
        return false;
      if (this.msgseq != that.msgseq)
        return false;
    }

    boolean this_present_msgtype = true;
    boolean that_present_msgtype = true;
    if (this_present_msgtype || that_present_msgtype) {
      if (!(this_present_msgtype && that_present_msgtype))
        return false;
      if (this.msgtype != that.msgtype)
        return false;
    }

    boolean this_present_selfuin = true && this.isSetSelfuin();
    boolean that_present_selfuin = true && that.isSetSelfuin();
    if (this_present_selfuin || that_present_selfuin) {
      if (!(this_present_selfuin && that_present_selfuin))
        return false;
      if (!this.selfuin.equals(that.selfuin))
        return false;
    }

    boolean this_present_sendFailCode = true;
    boolean that_present_sendFailCode = true;
    if (this_present_sendFailCode || that_present_sendFailCode) {
      if (!(this_present_sendFailCode && that_present_sendFailCode))
        return false;
      if (this.sendFailCode != that.sendFailCode)
        return false;
    }

    boolean this_present_senderuin = true && this.isSetSenderuin();
    boolean that_present_senderuin = true && that.isSetSenderuin();
    if (this_present_senderuin || that_present_senderuin) {
      if (!(this_present_senderuin && that_present_senderuin))
        return false;
      if (!this.senderuin.equals(that.senderuin))
        return false;
    }

    boolean this_present_shmsgseq = true;
    boolean that_present_shmsgseq = true;
    if (this_present_shmsgseq || that_present_shmsgseq) {
      if (!(this_present_shmsgseq && that_present_shmsgseq))
        return false;
      if (this.shmsgseq != that.shmsgseq)
        return false;
    }

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_uniseq = true;
    boolean that_present_uniseq = true;
    if (this_present_uniseq || that_present_uniseq) {
      if (!(this_present_uniseq && that_present_uniseq))
        return false;
      if (this.uniseq != that.uniseq)
        return false;
    }

    boolean this_present_versionCode = true;
    boolean that_present_versionCode = true;
    if (this_present_versionCode || that_present_versionCode) {
      if (!(this_present_versionCode && that_present_versionCode))
        return false;
      if (this.versionCode != that.versionCode)
        return false;
    }

    boolean this_present_vipBubbleID = true;
    boolean that_present_vipBubbleID = true;
    if (this_present_vipBubbleID || that_present_vipBubbleID) {
      if (!(this_present_vipBubbleID && that_present_vipBubbleID))
        return false;
      if (this.vipBubbleID != that.vipBubbleID)
        return false;
    }

    boolean this_present_actMsgContentValue = true && this.isSetActMsgContentValue();
    boolean that_present_actMsgContentValue = true && that.isSetActMsgContentValue();
    if (this_present_actMsgContentValue || that_present_actMsgContentValue) {
      if (!(this_present_actMsgContentValue && that_present_actMsgContentValue))
        return false;
      if (!this.actMsgContentValue.equals(that.actMsgContentValue))
        return false;
    }

    boolean this_present_action = true && this.isSetAction();
    boolean that_present_action = true && that.isSetAction();
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action))
        return false;
      if (!this.action.equals(that.action))
        return false;
    }

    boolean this_present_bizType = true;
    boolean that_present_bizType = true;
    if (this_present_bizType || that_present_bizType) {
      if (!(this_present_bizType && that_present_bizType))
        return false;
      if (this.bizType != that.bizType)
        return false;
    }

    boolean this_present_counter = true;
    boolean that_present_counter = true;
    if (this_present_counter || that_present_counter) {
      if (!(this_present_counter && that_present_counter))
        return false;
      if (this.counter != that.counter)
        return false;
    }

    boolean this_present_emoRecentMsg = true && this.isSetEmoRecentMsg();
    boolean that_present_emoRecentMsg = true && that.isSetEmoRecentMsg();
    if (this_present_emoRecentMsg || that_present_emoRecentMsg) {
      if (!(this_present_emoRecentMsg && that_present_emoRecentMsg))
        return false;
      if (!this.emoRecentMsg.equals(that.emoRecentMsg))
        return false;
    }

    boolean this_present_fileSize = true;
    boolean that_present_fileSize = true;
    if (this_present_fileSize || that_present_fileSize) {
      if (!(this_present_fileSize && that_present_fileSize))
        return false;
      if (this.fileSize != that.fileSize)
        return false;
    }

    boolean this_present_fileType = true;
    boolean that_present_fileType = true;
    if (this_present_fileType || that_present_fileType) {
      if (!(this_present_fileType && that_present_fileType))
        return false;
      if (this.fileType != that.fileType)
        return false;
    }

    boolean this_present_hasReply = true;
    boolean that_present_hasReply = true;
    if (this_present_hasReply || that_present_hasReply) {
      if (!(this_present_hasReply && that_present_hasReply))
        return false;
      if (this.hasReply != that.hasReply)
        return false;
    }

    boolean this_present_isCacheValid = true;
    boolean that_present_isCacheValid = true;
    if (this_present_isCacheValid || that_present_isCacheValid) {
      if (!(this_present_isCacheValid && that_present_isCacheValid))
        return false;
      if (this.isCacheValid != that.isCacheValid)
        return false;
    }

    boolean this_present_isInWhisper = true;
    boolean that_present_isInWhisper = true;
    if (this_present_isInWhisper || that_present_isInWhisper) {
      if (!(this_present_isInWhisper && that_present_isInWhisper))
        return false;
      if (this.isInWhisper != that.isInWhisper)
        return false;
    }

    boolean this_present_latestNormalMsgString = true && this.isSetLatestNormalMsgString();
    boolean that_present_latestNormalMsgString = true && that.isSetLatestNormalMsgString();
    if (this_present_latestNormalMsgString || that_present_latestNormalMsgString) {
      if (!(this_present_latestNormalMsgString && that_present_latestNormalMsgString))
        return false;
      if (!this.latestNormalMsgString.equals(that.latestNormalMsgString))
        return false;
    }

    boolean this_present_nickName = true && this.isSetNickName();
    boolean that_present_nickName = true && that.isSetNickName();
    if (this_present_nickName || that_present_nickName) {
      if (!(this_present_nickName && that_present_nickName))
        return false;
      if (!this.nickName.equals(that.nickName))
        return false;
    }

    boolean this_present_pttUrl = true && this.isSetPttUrl();
    boolean that_present_pttUrl = true && that.isSetPttUrl();
    if (this_present_pttUrl || that_present_pttUrl) {
      if (!(this_present_pttUrl && that_present_pttUrl))
        return false;
      if (!this.pttUrl.equals(that.pttUrl))
        return false;
    }

    boolean this_present_shareAppID = true;
    boolean that_present_shareAppID = true;
    if (this_present_shareAppID || that_present_shareAppID) {
      if (!(this_present_shareAppID && that_present_shareAppID))
        return false;
      if (this.shareAppID != that.shareAppID)
        return false;
    }

    boolean this_present_unReadNum = true;
    boolean that_present_unReadNum = true;
    if (this_present_unReadNum || that_present_unReadNum) {
      if (!(this_present_unReadNum && that_present_unReadNum))
        return false;
      if (this.unReadNum != that.unReadNum)
        return false;
    }

    boolean this_present_summary = true && this.isSetSummary();
    boolean that_present_summary = true && that.isSetSummary();
    if (this_present_summary || that_present_summary) {
      if (!(this_present_summary && that_present_summary))
        return false;
      if (!this.summary.equals(that.summary))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_id);

    hashCode = hashCode * 8191 + _status;

    hashCode = hashCode * 8191 + extInt;

    hashCode = hashCode * 8191 + extLong;

    hashCode = hashCode * 8191 + ((isSetExtStr()) ? 131071 : 524287);
    if (isSetExtStr())
      hashCode = hashCode * 8191 + extStr.hashCode();

    hashCode = hashCode * 8191 + extraflag;

    hashCode = hashCode * 8191 + ((isSetFrienduin()) ? 131071 : 524287);
    if (isSetFrienduin())
      hashCode = hashCode * 8191 + frienduin.hashCode();

    hashCode = hashCode * 8191 + ((isValid) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isread) ? 131071 : 524287);

    hashCode = hashCode * 8191 + issend;

    hashCode = hashCode * 8191 + istroop;

    hashCode = hashCode * 8191 + longMsgCount;

    hashCode = hashCode * 8191 + longMsgId;

    hashCode = hashCode * 8191 + longMsgIndex;

    hashCode = hashCode * 8191 + ((isSetMsg()) ? 131071 : 524287);
    if (isSetMsg())
      hashCode = hashCode * 8191 + msg.hashCode();

    hashCode = hashCode * 8191 + ((isSetMsgData()) ? 131071 : 524287);
    if (isSetMsgData())
      hashCode = hashCode * 8191 + msgData.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(msgId);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(msgUid);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(msgseq);

    hashCode = hashCode * 8191 + msgtype;

    hashCode = hashCode * 8191 + ((isSetSelfuin()) ? 131071 : 524287);
    if (isSetSelfuin())
      hashCode = hashCode * 8191 + selfuin.hashCode();

    hashCode = hashCode * 8191 + sendFailCode;

    hashCode = hashCode * 8191 + ((isSetSenderuin()) ? 131071 : 524287);
    if (isSetSenderuin())
      hashCode = hashCode * 8191 + senderuin.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(shmsgseq);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(time);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(uniseq);

    hashCode = hashCode * 8191 + versionCode;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(vipBubbleID);

    hashCode = hashCode * 8191 + ((isSetActMsgContentValue()) ? 131071 : 524287);
    if (isSetActMsgContentValue())
      hashCode = hashCode * 8191 + actMsgContentValue.hashCode();

    hashCode = hashCode * 8191 + ((isSetAction()) ? 131071 : 524287);
    if (isSetAction())
      hashCode = hashCode * 8191 + action.hashCode();

    hashCode = hashCode * 8191 + bizType;

    hashCode = hashCode * 8191 + counter;

    hashCode = hashCode * 8191 + ((isSetEmoRecentMsg()) ? 131071 : 524287);
    if (isSetEmoRecentMsg())
      hashCode = hashCode * 8191 + emoRecentMsg.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fileSize);

    hashCode = hashCode * 8191 + fileType;

    hashCode = hashCode * 8191 + ((hasReply) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isCacheValid) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isInWhisper) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetLatestNormalMsgString()) ? 131071 : 524287);
    if (isSetLatestNormalMsgString())
      hashCode = hashCode * 8191 + latestNormalMsgString.hashCode();

    hashCode = hashCode * 8191 + ((isSetNickName()) ? 131071 : 524287);
    if (isSetNickName())
      hashCode = hashCode * 8191 + nickName.hashCode();

    hashCode = hashCode * 8191 + ((isSetPttUrl()) ? 131071 : 524287);
    if (isSetPttUrl())
      hashCode = hashCode * 8191 + pttUrl.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(shareAppID);

    hashCode = hashCode * 8191 + unReadNum;

    hashCode = hashCode * 8191 + ((isSetSummary()) ? 131071 : 524287);
    if (isSetSummary())
      hashCode = hashCode * 8191 + summary.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(QQMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSet_id()).compareTo(other.isSet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, other._id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_status()).compareTo(other.isSet_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._status, other._status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtInt()).compareTo(other.isSetExtInt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtInt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extInt, other.extInt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtLong()).compareTo(other.isSetExtLong());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtLong()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extLong, other.extLong);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtStr()).compareTo(other.isSetExtStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extStr, other.extStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraflag()).compareTo(other.isSetExtraflag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraflag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraflag, other.extraflag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrienduin()).compareTo(other.isSetFrienduin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrienduin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frienduin, other.frienduin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsValid()).compareTo(other.isSetIsValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isValid, other.isValid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsread()).compareTo(other.isSetIsread());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsread()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isread, other.isread);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssend()).compareTo(other.isSetIssend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issend, other.issend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIstroop()).compareTo(other.isSetIstroop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIstroop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.istroop, other.istroop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongMsgCount()).compareTo(other.isSetLongMsgCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongMsgCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longMsgCount, other.longMsgCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongMsgId()).compareTo(other.isSetLongMsgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongMsgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longMsgId, other.longMsgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongMsgIndex()).compareTo(other.isSetLongMsgIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongMsgIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longMsgIndex, other.longMsgIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgData()).compareTo(other.isSetMsgData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgData, other.msgData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgId()).compareTo(other.isSetMsgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgId, other.msgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgUid()).compareTo(other.isSetMsgUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgUid, other.msgUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgseq()).compareTo(other.isSetMsgseq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgseq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgseq, other.msgseq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgtype()).compareTo(other.isSetMsgtype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgtype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgtype, other.msgtype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSelfuin()).compareTo(other.isSetSelfuin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelfuin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selfuin, other.selfuin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendFailCode()).compareTo(other.isSetSendFailCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendFailCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendFailCode, other.sendFailCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSenderuin()).compareTo(other.isSetSenderuin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenderuin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senderuin, other.senderuin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShmsgseq()).compareTo(other.isSetShmsgseq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShmsgseq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shmsgseq, other.shmsgseq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUniseq()).compareTo(other.isSetUniseq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUniseq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uniseq, other.uniseq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersionCode()).compareTo(other.isSetVersionCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionCode, other.versionCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipBubbleID()).compareTo(other.isSetVipBubbleID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipBubbleID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipBubbleID, other.vipBubbleID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActMsgContentValue()).compareTo(other.isSetActMsgContentValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActMsgContentValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actMsgContentValue, other.actMsgContentValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBizType()).compareTo(other.isSetBizType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBizType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizType, other.bizType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCounter()).compareTo(other.isSetCounter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCounter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counter, other.counter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmoRecentMsg()).compareTo(other.isSetEmoRecentMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmoRecentMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emoRecentMsg, other.emoRecentMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileSize()).compareTo(other.isSetFileSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSize, other.fileSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileType()).compareTo(other.isSetFileType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileType, other.fileType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasReply()).compareTo(other.isSetHasReply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasReply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasReply, other.hasReply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsCacheValid()).compareTo(other.isSetIsCacheValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCacheValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCacheValid, other.isCacheValid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsInWhisper()).compareTo(other.isSetIsInWhisper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsInWhisper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isInWhisper, other.isInWhisper);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatestNormalMsgString()).compareTo(other.isSetLatestNormalMsgString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatestNormalMsgString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latestNormalMsgString, other.latestNormalMsgString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickName()).compareTo(other.isSetNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickName, other.nickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPttUrl()).compareTo(other.isSetPttUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPttUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pttUrl, other.pttUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareAppID()).compareTo(other.isSetShareAppID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareAppID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareAppID, other.shareAppID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnReadNum()).compareTo(other.isSetUnReadNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnReadNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unReadNum, other.unReadNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSummary()).compareTo(other.isSetSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summary, other.summary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QQMessage(");
    boolean first = true;

    sb.append("_id:");
    sb.append(this._id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_status:");
    sb.append(this._status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extInt:");
    sb.append(this.extInt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extLong:");
    sb.append(this.extLong);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extStr:");
    if (this.extStr == null) {
      sb.append("null");
    } else {
      sb.append(this.extStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extraflag:");
    sb.append(this.extraflag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("frienduin:");
    if (this.frienduin == null) {
      sb.append("null");
    } else {
      sb.append(this.frienduin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isValid:");
    sb.append(this.isValid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isread:");
    sb.append(this.isread);
    first = false;
    if (!first) sb.append(", ");
    sb.append("issend:");
    sb.append(this.issend);
    first = false;
    if (!first) sb.append(", ");
    sb.append("istroop:");
    sb.append(this.istroop);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longMsgCount:");
    sb.append(this.longMsgCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longMsgId:");
    sb.append(this.longMsgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longMsgIndex:");
    sb.append(this.longMsgIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("msg:");
    if (this.msg == null) {
      sb.append("null");
    } else {
      sb.append(this.msg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("msgData:");
    if (this.msgData == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.msgData, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("msgId:");
    sb.append(this.msgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("msgUid:");
    sb.append(this.msgUid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("msgseq:");
    sb.append(this.msgseq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("msgtype:");
    sb.append(this.msgtype);
    first = false;
    if (!first) sb.append(", ");
    sb.append("selfuin:");
    if (this.selfuin == null) {
      sb.append("null");
    } else {
      sb.append(this.selfuin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sendFailCode:");
    sb.append(this.sendFailCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("senderuin:");
    if (this.senderuin == null) {
      sb.append("null");
    } else {
      sb.append(this.senderuin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shmsgseq:");
    sb.append(this.shmsgseq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    sb.append(this.time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uniseq:");
    sb.append(this.uniseq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("versionCode:");
    sb.append(this.versionCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipBubbleID:");
    sb.append(this.vipBubbleID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actMsgContentValue:");
    if (this.actMsgContentValue == null) {
      sb.append("null");
    } else {
      sb.append(this.actMsgContentValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("action:");
    if (this.action == null) {
      sb.append("null");
    } else {
      sb.append(this.action);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bizType:");
    sb.append(this.bizType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("counter:");
    sb.append(this.counter);
    first = false;
    if (!first) sb.append(", ");
    sb.append("emoRecentMsg:");
    if (this.emoRecentMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.emoRecentMsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileSize:");
    sb.append(this.fileSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileType:");
    sb.append(this.fileType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasReply:");
    sb.append(this.hasReply);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isCacheValid:");
    sb.append(this.isCacheValid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isInWhisper:");
    sb.append(this.isInWhisper);
    first = false;
    if (!first) sb.append(", ");
    sb.append("latestNormalMsgString:");
    if (this.latestNormalMsgString == null) {
      sb.append("null");
    } else {
      sb.append(this.latestNormalMsgString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nickName:");
    if (this.nickName == null) {
      sb.append("null");
    } else {
      sb.append(this.nickName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pttUrl:");
    if (this.pttUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.pttUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shareAppID:");
    sb.append(this.shareAppID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unReadNum:");
    sb.append(this.unReadNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("summary:");
    if (this.summary == null) {
      sb.append("null");
    } else {
      sb.append(this.summary);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QQMessageStandardSchemeFactory implements SchemeFactory {
    public QQMessageStandardScheme getScheme() {
      return new QQMessageStandardScheme();
    }
  }

  private static class QQMessageStandardScheme extends StandardScheme<QQMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QQMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._id = iprot.readI64();
              struct.set_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._status = iprot.readI32();
              struct.set_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXT_INT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.extInt = iprot.readI32();
              struct.setExtIntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXT_LONG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.extLong = iprot.readI32();
              struct.setExtLongIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXT_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extStr = iprot.readString();
              struct.setExtStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXTRAFLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.extraflag = iprot.readI32();
              struct.setExtraflagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FRIENDUIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.frienduin = iprot.readString();
              struct.setFrienduinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isValid = iprot.readBool();
              struct.setIsValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ISREAD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isread = iprot.readBool();
              struct.setIsreadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ISSEND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.issend = iprot.readI32();
              struct.setIssendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ISTROOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.istroop = iprot.readI32();
              struct.setIstroopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LONG_MSG_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.longMsgCount = iprot.readI32();
              struct.setLongMsgCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LONG_MSG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.longMsgId = iprot.readI32();
              struct.setLongMsgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LONG_MSG_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.longMsgIndex = iprot.readI32();
              struct.setLongMsgIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msg = iprot.readString();
              struct.setMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MSG_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msgData = iprot.readBinary();
              struct.setMsgDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MSG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.msgId = iprot.readI64();
              struct.setMsgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MSG_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.msgUid = iprot.readI64();
              struct.setMsgUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MSGSEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.msgseq = iprot.readI64();
              struct.setMsgseqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MSGTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.msgtype = iprot.readI32();
              struct.setMsgtypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SELFUIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.selfuin = iprot.readString();
              struct.setSelfuinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SEND_FAIL_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sendFailCode = iprot.readI32();
              struct.setSendFailCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SENDERUIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.senderuin = iprot.readString();
              struct.setSenderuinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // SHMSGSEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.shmsgseq = iprot.readI64();
              struct.setShmsgseqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time = iprot.readI64();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // UNISEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uniseq = iprot.readI64();
              struct.setUniseqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // VERSION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.versionCode = iprot.readI32();
              struct.setVersionCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // VIP_BUBBLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.vipBubbleID = iprot.readI64();
              struct.setVipBubbleIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // ACT_MSG_CONTENT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actMsgContentValue = iprot.readString();
              struct.setActMsgContentValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.action = iprot.readString();
              struct.setActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // BIZ_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bizType = iprot.readI32();
              struct.setBizTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // COUNTER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.counter = iprot.readI32();
              struct.setCounterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // EMO_RECENT_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.emoRecentMsg = iprot.readString();
              struct.setEmoRecentMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fileSize = iprot.readI64();
              struct.setFileSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // FILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileType = iprot.readI32();
              struct.setFileTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // HAS_REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasReply = iprot.readBool();
              struct.setHasReplyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // IS_CACHE_VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isCacheValid = iprot.readBool();
              struct.setIsCacheValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // IS_IN_WHISPER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isInWhisper = iprot.readBool();
              struct.setIsInWhisperIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // LATEST_NORMAL_MSG_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.latestNormalMsgString = iprot.readString();
              struct.setLatestNormalMsgStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickName = iprot.readString();
              struct.setNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // PTT_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pttUrl = iprot.readString();
              struct.setPttUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // SHARE_APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.shareAppID = iprot.readI64();
              struct.setShareAppIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // UN_READ_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unReadNum = iprot.readI32();
              struct.setUnReadNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.summary = iprot.readString();
              struct.setSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QQMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(_ID_FIELD_DESC);
      oprot.writeI64(struct._id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_STATUS_FIELD_DESC);
      oprot.writeI32(struct._status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXT_INT_FIELD_DESC);
      oprot.writeI32(struct.extInt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXT_LONG_FIELD_DESC);
      oprot.writeI32(struct.extLong);
      oprot.writeFieldEnd();
      if (struct.extStr != null) {
        oprot.writeFieldBegin(EXT_STR_FIELD_DESC);
        oprot.writeString(struct.extStr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXTRAFLAG_FIELD_DESC);
      oprot.writeI32(struct.extraflag);
      oprot.writeFieldEnd();
      if (struct.frienduin != null) {
        oprot.writeFieldBegin(FRIENDUIN_FIELD_DESC);
        oprot.writeString(struct.frienduin);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_VALID_FIELD_DESC);
      oprot.writeBool(struct.isValid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISREAD_FIELD_DESC);
      oprot.writeBool(struct.isread);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISSEND_FIELD_DESC);
      oprot.writeI32(struct.issend);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISTROOP_FIELD_DESC);
      oprot.writeI32(struct.istroop);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_MSG_COUNT_FIELD_DESC);
      oprot.writeI32(struct.longMsgCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_MSG_ID_FIELD_DESC);
      oprot.writeI32(struct.longMsgId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_MSG_INDEX_FIELD_DESC);
      oprot.writeI32(struct.longMsgIndex);
      oprot.writeFieldEnd();
      if (struct.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        oprot.writeString(struct.msg);
        oprot.writeFieldEnd();
      }
      if (struct.msgData != null) {
        oprot.writeFieldBegin(MSG_DATA_FIELD_DESC);
        oprot.writeBinary(struct.msgData);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MSG_ID_FIELD_DESC);
      oprot.writeI64(struct.msgId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MSG_UID_FIELD_DESC);
      oprot.writeI64(struct.msgUid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MSGSEQ_FIELD_DESC);
      oprot.writeI64(struct.msgseq);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MSGTYPE_FIELD_DESC);
      oprot.writeI32(struct.msgtype);
      oprot.writeFieldEnd();
      if (struct.selfuin != null) {
        oprot.writeFieldBegin(SELFUIN_FIELD_DESC);
        oprot.writeString(struct.selfuin);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEND_FAIL_CODE_FIELD_DESC);
      oprot.writeI32(struct.sendFailCode);
      oprot.writeFieldEnd();
      if (struct.senderuin != null) {
        oprot.writeFieldBegin(SENDERUIN_FIELD_DESC);
        oprot.writeString(struct.senderuin);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHMSGSEQ_FIELD_DESC);
      oprot.writeI64(struct.shmsgseq);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI64(struct.time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNISEQ_FIELD_DESC);
      oprot.writeI64(struct.uniseq);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_CODE_FIELD_DESC);
      oprot.writeI32(struct.versionCode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_BUBBLE_ID_FIELD_DESC);
      oprot.writeI64(struct.vipBubbleID);
      oprot.writeFieldEnd();
      if (struct.actMsgContentValue != null) {
        oprot.writeFieldBegin(ACT_MSG_CONTENT_VALUE_FIELD_DESC);
        oprot.writeString(struct.actMsgContentValue);
        oprot.writeFieldEnd();
      }
      if (struct.action != null) {
        oprot.writeFieldBegin(ACTION_FIELD_DESC);
        oprot.writeString(struct.action);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BIZ_TYPE_FIELD_DESC);
      oprot.writeI32(struct.bizType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNTER_FIELD_DESC);
      oprot.writeI32(struct.counter);
      oprot.writeFieldEnd();
      if (struct.emoRecentMsg != null) {
        oprot.writeFieldBegin(EMO_RECENT_MSG_FIELD_DESC);
        oprot.writeString(struct.emoRecentMsg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FILE_SIZE_FIELD_DESC);
      oprot.writeI64(struct.fileSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.fileType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_REPLY_FIELD_DESC);
      oprot.writeBool(struct.hasReply);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CACHE_VALID_FIELD_DESC);
      oprot.writeBool(struct.isCacheValid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_IN_WHISPER_FIELD_DESC);
      oprot.writeBool(struct.isInWhisper);
      oprot.writeFieldEnd();
      if (struct.latestNormalMsgString != null) {
        oprot.writeFieldBegin(LATEST_NORMAL_MSG_STRING_FIELD_DESC);
        oprot.writeString(struct.latestNormalMsgString);
        oprot.writeFieldEnd();
      }
      if (struct.nickName != null) {
        oprot.writeFieldBegin(NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.nickName);
        oprot.writeFieldEnd();
      }
      if (struct.pttUrl != null) {
        oprot.writeFieldBegin(PTT_URL_FIELD_DESC);
        oprot.writeString(struct.pttUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHARE_APP_ID_FIELD_DESC);
      oprot.writeI64(struct.shareAppID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UN_READ_NUM_FIELD_DESC);
      oprot.writeI32(struct.unReadNum);
      oprot.writeFieldEnd();
      if (struct.summary != null) {
        oprot.writeFieldBegin(SUMMARY_FIELD_DESC);
        oprot.writeString(struct.summary);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QQMessageTupleSchemeFactory implements SchemeFactory {
    public QQMessageTupleScheme getScheme() {
      return new QQMessageTupleScheme();
    }
  }

  private static class QQMessageTupleScheme extends TupleScheme<QQMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QQMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSet_id()) {
        optionals.set(0);
      }
      if (struct.isSet_status()) {
        optionals.set(1);
      }
      if (struct.isSetExtInt()) {
        optionals.set(2);
      }
      if (struct.isSetExtLong()) {
        optionals.set(3);
      }
      if (struct.isSetExtStr()) {
        optionals.set(4);
      }
      if (struct.isSetExtraflag()) {
        optionals.set(5);
      }
      if (struct.isSetFrienduin()) {
        optionals.set(6);
      }
      if (struct.isSetIsValid()) {
        optionals.set(7);
      }
      if (struct.isSetIsread()) {
        optionals.set(8);
      }
      if (struct.isSetIssend()) {
        optionals.set(9);
      }
      if (struct.isSetIstroop()) {
        optionals.set(10);
      }
      if (struct.isSetLongMsgCount()) {
        optionals.set(11);
      }
      if (struct.isSetLongMsgId()) {
        optionals.set(12);
      }
      if (struct.isSetLongMsgIndex()) {
        optionals.set(13);
      }
      if (struct.isSetMsg()) {
        optionals.set(14);
      }
      if (struct.isSetMsgData()) {
        optionals.set(15);
      }
      if (struct.isSetMsgId()) {
        optionals.set(16);
      }
      if (struct.isSetMsgUid()) {
        optionals.set(17);
      }
      if (struct.isSetMsgseq()) {
        optionals.set(18);
      }
      if (struct.isSetMsgtype()) {
        optionals.set(19);
      }
      if (struct.isSetSelfuin()) {
        optionals.set(20);
      }
      if (struct.isSetSendFailCode()) {
        optionals.set(21);
      }
      if (struct.isSetSenderuin()) {
        optionals.set(22);
      }
      if (struct.isSetShmsgseq()) {
        optionals.set(23);
      }
      if (struct.isSetTime()) {
        optionals.set(24);
      }
      if (struct.isSetUniseq()) {
        optionals.set(25);
      }
      if (struct.isSetVersionCode()) {
        optionals.set(26);
      }
      if (struct.isSetVipBubbleID()) {
        optionals.set(27);
      }
      if (struct.isSetActMsgContentValue()) {
        optionals.set(28);
      }
      if (struct.isSetAction()) {
        optionals.set(29);
      }
      if (struct.isSetBizType()) {
        optionals.set(30);
      }
      if (struct.isSetCounter()) {
        optionals.set(31);
      }
      if (struct.isSetEmoRecentMsg()) {
        optionals.set(32);
      }
      if (struct.isSetFileSize()) {
        optionals.set(33);
      }
      if (struct.isSetFileType()) {
        optionals.set(34);
      }
      if (struct.isSetHasReply()) {
        optionals.set(35);
      }
      if (struct.isSetIsCacheValid()) {
        optionals.set(36);
      }
      if (struct.isSetIsInWhisper()) {
        optionals.set(37);
      }
      if (struct.isSetLatestNormalMsgString()) {
        optionals.set(38);
      }
      if (struct.isSetNickName()) {
        optionals.set(39);
      }
      if (struct.isSetPttUrl()) {
        optionals.set(40);
      }
      if (struct.isSetShareAppID()) {
        optionals.set(41);
      }
      if (struct.isSetUnReadNum()) {
        optionals.set(42);
      }
      if (struct.isSetSummary()) {
        optionals.set(43);
      }
      oprot.writeBitSet(optionals, 44);
      if (struct.isSet_id()) {
        oprot.writeI64(struct._id);
      }
      if (struct.isSet_status()) {
        oprot.writeI32(struct._status);
      }
      if (struct.isSetExtInt()) {
        oprot.writeI32(struct.extInt);
      }
      if (struct.isSetExtLong()) {
        oprot.writeI32(struct.extLong);
      }
      if (struct.isSetExtStr()) {
        oprot.writeString(struct.extStr);
      }
      if (struct.isSetExtraflag()) {
        oprot.writeI32(struct.extraflag);
      }
      if (struct.isSetFrienduin()) {
        oprot.writeString(struct.frienduin);
      }
      if (struct.isSetIsValid()) {
        oprot.writeBool(struct.isValid);
      }
      if (struct.isSetIsread()) {
        oprot.writeBool(struct.isread);
      }
      if (struct.isSetIssend()) {
        oprot.writeI32(struct.issend);
      }
      if (struct.isSetIstroop()) {
        oprot.writeI32(struct.istroop);
      }
      if (struct.isSetLongMsgCount()) {
        oprot.writeI32(struct.longMsgCount);
      }
      if (struct.isSetLongMsgId()) {
        oprot.writeI32(struct.longMsgId);
      }
      if (struct.isSetLongMsgIndex()) {
        oprot.writeI32(struct.longMsgIndex);
      }
      if (struct.isSetMsg()) {
        oprot.writeString(struct.msg);
      }
      if (struct.isSetMsgData()) {
        oprot.writeBinary(struct.msgData);
      }
      if (struct.isSetMsgId()) {
        oprot.writeI64(struct.msgId);
      }
      if (struct.isSetMsgUid()) {
        oprot.writeI64(struct.msgUid);
      }
      if (struct.isSetMsgseq()) {
        oprot.writeI64(struct.msgseq);
      }
      if (struct.isSetMsgtype()) {
        oprot.writeI32(struct.msgtype);
      }
      if (struct.isSetSelfuin()) {
        oprot.writeString(struct.selfuin);
      }
      if (struct.isSetSendFailCode()) {
        oprot.writeI32(struct.sendFailCode);
      }
      if (struct.isSetSenderuin()) {
        oprot.writeString(struct.senderuin);
      }
      if (struct.isSetShmsgseq()) {
        oprot.writeI64(struct.shmsgseq);
      }
      if (struct.isSetTime()) {
        oprot.writeI64(struct.time);
      }
      if (struct.isSetUniseq()) {
        oprot.writeI64(struct.uniseq);
      }
      if (struct.isSetVersionCode()) {
        oprot.writeI32(struct.versionCode);
      }
      if (struct.isSetVipBubbleID()) {
        oprot.writeI64(struct.vipBubbleID);
      }
      if (struct.isSetActMsgContentValue()) {
        oprot.writeString(struct.actMsgContentValue);
      }
      if (struct.isSetAction()) {
        oprot.writeString(struct.action);
      }
      if (struct.isSetBizType()) {
        oprot.writeI32(struct.bizType);
      }
      if (struct.isSetCounter()) {
        oprot.writeI32(struct.counter);
      }
      if (struct.isSetEmoRecentMsg()) {
        oprot.writeString(struct.emoRecentMsg);
      }
      if (struct.isSetFileSize()) {
        oprot.writeI64(struct.fileSize);
      }
      if (struct.isSetFileType()) {
        oprot.writeI32(struct.fileType);
      }
      if (struct.isSetHasReply()) {
        oprot.writeBool(struct.hasReply);
      }
      if (struct.isSetIsCacheValid()) {
        oprot.writeBool(struct.isCacheValid);
      }
      if (struct.isSetIsInWhisper()) {
        oprot.writeBool(struct.isInWhisper);
      }
      if (struct.isSetLatestNormalMsgString()) {
        oprot.writeString(struct.latestNormalMsgString);
      }
      if (struct.isSetNickName()) {
        oprot.writeString(struct.nickName);
      }
      if (struct.isSetPttUrl()) {
        oprot.writeString(struct.pttUrl);
      }
      if (struct.isSetShareAppID()) {
        oprot.writeI64(struct.shareAppID);
      }
      if (struct.isSetUnReadNum()) {
        oprot.writeI32(struct.unReadNum);
      }
      if (struct.isSetSummary()) {
        oprot.writeString(struct.summary);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QQMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(44);
      if (incoming.get(0)) {
        struct._id = iprot.readI64();
        struct.set_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct._status = iprot.readI32();
        struct.set_statusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.extInt = iprot.readI32();
        struct.setExtIntIsSet(true);
      }
      if (incoming.get(3)) {
        struct.extLong = iprot.readI32();
        struct.setExtLongIsSet(true);
      }
      if (incoming.get(4)) {
        struct.extStr = iprot.readString();
        struct.setExtStrIsSet(true);
      }
      if (incoming.get(5)) {
        struct.extraflag = iprot.readI32();
        struct.setExtraflagIsSet(true);
      }
      if (incoming.get(6)) {
        struct.frienduin = iprot.readString();
        struct.setFrienduinIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isValid = iprot.readBool();
        struct.setIsValidIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isread = iprot.readBool();
        struct.setIsreadIsSet(true);
      }
      if (incoming.get(9)) {
        struct.issend = iprot.readI32();
        struct.setIssendIsSet(true);
      }
      if (incoming.get(10)) {
        struct.istroop = iprot.readI32();
        struct.setIstroopIsSet(true);
      }
      if (incoming.get(11)) {
        struct.longMsgCount = iprot.readI32();
        struct.setLongMsgCountIsSet(true);
      }
      if (incoming.get(12)) {
        struct.longMsgId = iprot.readI32();
        struct.setLongMsgIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.longMsgIndex = iprot.readI32();
        struct.setLongMsgIndexIsSet(true);
      }
      if (incoming.get(14)) {
        struct.msg = iprot.readString();
        struct.setMsgIsSet(true);
      }
      if (incoming.get(15)) {
        struct.msgData = iprot.readBinary();
        struct.setMsgDataIsSet(true);
      }
      if (incoming.get(16)) {
        struct.msgId = iprot.readI64();
        struct.setMsgIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.msgUid = iprot.readI64();
        struct.setMsgUidIsSet(true);
      }
      if (incoming.get(18)) {
        struct.msgseq = iprot.readI64();
        struct.setMsgseqIsSet(true);
      }
      if (incoming.get(19)) {
        struct.msgtype = iprot.readI32();
        struct.setMsgtypeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.selfuin = iprot.readString();
        struct.setSelfuinIsSet(true);
      }
      if (incoming.get(21)) {
        struct.sendFailCode = iprot.readI32();
        struct.setSendFailCodeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.senderuin = iprot.readString();
        struct.setSenderuinIsSet(true);
      }
      if (incoming.get(23)) {
        struct.shmsgseq = iprot.readI64();
        struct.setShmsgseqIsSet(true);
      }
      if (incoming.get(24)) {
        struct.time = iprot.readI64();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.uniseq = iprot.readI64();
        struct.setUniseqIsSet(true);
      }
      if (incoming.get(26)) {
        struct.versionCode = iprot.readI32();
        struct.setVersionCodeIsSet(true);
      }
      if (incoming.get(27)) {
        struct.vipBubbleID = iprot.readI64();
        struct.setVipBubbleIDIsSet(true);
      }
      if (incoming.get(28)) {
        struct.actMsgContentValue = iprot.readString();
        struct.setActMsgContentValueIsSet(true);
      }
      if (incoming.get(29)) {
        struct.action = iprot.readString();
        struct.setActionIsSet(true);
      }
      if (incoming.get(30)) {
        struct.bizType = iprot.readI32();
        struct.setBizTypeIsSet(true);
      }
      if (incoming.get(31)) {
        struct.counter = iprot.readI32();
        struct.setCounterIsSet(true);
      }
      if (incoming.get(32)) {
        struct.emoRecentMsg = iprot.readString();
        struct.setEmoRecentMsgIsSet(true);
      }
      if (incoming.get(33)) {
        struct.fileSize = iprot.readI64();
        struct.setFileSizeIsSet(true);
      }
      if (incoming.get(34)) {
        struct.fileType = iprot.readI32();
        struct.setFileTypeIsSet(true);
      }
      if (incoming.get(35)) {
        struct.hasReply = iprot.readBool();
        struct.setHasReplyIsSet(true);
      }
      if (incoming.get(36)) {
        struct.isCacheValid = iprot.readBool();
        struct.setIsCacheValidIsSet(true);
      }
      if (incoming.get(37)) {
        struct.isInWhisper = iprot.readBool();
        struct.setIsInWhisperIsSet(true);
      }
      if (incoming.get(38)) {
        struct.latestNormalMsgString = iprot.readString();
        struct.setLatestNormalMsgStringIsSet(true);
      }
      if (incoming.get(39)) {
        struct.nickName = iprot.readString();
        struct.setNickNameIsSet(true);
      }
      if (incoming.get(40)) {
        struct.pttUrl = iprot.readString();
        struct.setPttUrlIsSet(true);
      }
      if (incoming.get(41)) {
        struct.shareAppID = iprot.readI64();
        struct.setShareAppIDIsSet(true);
      }
      if (incoming.get(42)) {
        struct.unReadNum = iprot.readI32();
        struct.setUnReadNumIsSet(true);
      }
      if (incoming.get(43)) {
        struct.summary = iprot.readString();
        struct.setSummaryIsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

