/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package me.gitai.kanban.data;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-04-18")
public class QQService {

  public interface Iface {

    public boolean sendMsg(String frienduin, String msg) throws org.apache.thrift.TException;

    public String getNickName(String selfuin, String senderuin, String frienduin) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void sendMsg(String frienduin, String msg, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getNickName(String selfuin, String senderuin, String frienduin, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean sendMsg(String frienduin, String msg) throws org.apache.thrift.TException
    {
      send_sendMsg(frienduin, msg);
      return recv_sendMsg();
    }

    public void send_sendMsg(String frienduin, String msg) throws org.apache.thrift.TException
    {
      sendMsg_args args = new sendMsg_args();
      args.setFrienduin(frienduin);
      args.setMsg(msg);
      sendBase("sendMsg", args);
    }

    public boolean recv_sendMsg() throws org.apache.thrift.TException
    {
      sendMsg_result result = new sendMsg_result();
      receiveBase(result, "sendMsg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendMsg failed: unknown result");
    }

    public String getNickName(String selfuin, String senderuin, String frienduin) throws org.apache.thrift.TException
    {
      send_getNickName(selfuin, senderuin, frienduin);
      return recv_getNickName();
    }

    public void send_getNickName(String selfuin, String senderuin, String frienduin) throws org.apache.thrift.TException
    {
      getNickName_args args = new getNickName_args();
      args.setSelfuin(selfuin);
      args.setSenderuin(senderuin);
      args.setFrienduin(frienduin);
      sendBase("getNickName", args);
    }

    public String recv_getNickName() throws org.apache.thrift.TException
    {
      getNickName_result result = new getNickName_result();
      receiveBase(result, "getNickName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNickName failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void sendMsg(String frienduin, String msg, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendMsg_call method_call = new sendMsg_call(frienduin, msg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendMsg_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private String frienduin;
      private String msg;
      public sendMsg_call(String frienduin, String msg, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.frienduin = frienduin;
        this.msg = msg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendMsg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendMsg_args args = new sendMsg_args();
        args.setFrienduin(frienduin);
        args.setMsg(msg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendMsg();
      }
    }

    public void getNickName(String selfuin, String senderuin, String frienduin, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNickName_call method_call = new getNickName_call(selfuin, senderuin, frienduin, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNickName_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private String selfuin;
      private String senderuin;
      private String frienduin;
      public getNickName_call(String selfuin, String senderuin, String frienduin, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.selfuin = selfuin;
        this.senderuin = senderuin;
        this.frienduin = frienduin;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNickName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNickName_args args = new getNickName_args();
        args.setSelfuin(selfuin);
        args.setSenderuin(senderuin);
        args.setFrienduin(frienduin);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNickName();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("sendMsg", new sendMsg());
      processMap.put("getNickName", new getNickName());
      return processMap;
    }

    public static class sendMsg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendMsg_args> {
      public sendMsg() {
        super("sendMsg");
      }

      public sendMsg_args getEmptyArgsInstance() {
        return new sendMsg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendMsg_result getResult(I iface, sendMsg_args args) throws org.apache.thrift.TException {
        sendMsg_result result = new sendMsg_result();
        result.success = iface.sendMsg(args.frienduin, args.msg);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getNickName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNickName_args> {
      public getNickName() {
        super("getNickName");
      }

      public getNickName_args getEmptyArgsInstance() {
        return new getNickName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNickName_result getResult(I iface, getNickName_args args) throws org.apache.thrift.TException {
        getNickName_result result = new getNickName_result();
        result.success = iface.getNickName(args.selfuin, args.senderuin, args.frienduin);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("sendMsg", new sendMsg());
      processMap.put("getNickName", new getNickName());
      return processMap;
    }

    public static class sendMsg<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendMsg_args, Boolean> {
      public sendMsg() {
        super("sendMsg");
      }

      public sendMsg_args getEmptyArgsInstance() {
        return new sendMsg_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            sendMsg_result result = new sendMsg_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sendMsg_result result = new sendMsg_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendMsg_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.sendMsg(args.frienduin, args.msg,resultHandler);
      }
    }

    public static class getNickName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNickName_args, String> {
      public getNickName() {
        super("getNickName");
      }

      public getNickName_args getEmptyArgsInstance() {
        return new getNickName_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getNickName_result result = new getNickName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getNickName_result result = new getNickName_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNickName_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.getNickName(args.selfuin, args.senderuin, args.frienduin,resultHandler);
      }
    }

  }

  public static class sendMsg_args implements org.apache.thrift.TBase<sendMsg_args, sendMsg_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendMsg_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMsg_args");

    private static final org.apache.thrift.protocol.TField FRIENDUIN_FIELD_DESC = new org.apache.thrift.protocol.TField("frienduin", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new sendMsg_argsStandardSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new sendMsg_argsTupleSchemeFactory();

    public String frienduin; // required
    public String msg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FRIENDUIN((short)1, "frienduin"),
      MSG((short)2, "msg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FRIENDUIN
            return FRIENDUIN;
          case 2: // MSG
            return MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FRIENDUIN, new org.apache.thrift.meta_data.FieldMetaData("frienduin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMsg_args.class, metaDataMap);
    }

    public sendMsg_args() {
    }

    public sendMsg_args(
      String frienduin,
      String msg)
    {
      this();
      this.frienduin = frienduin;
      this.msg = msg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMsg_args(sendMsg_args other) {
      if (other.isSetFrienduin()) {
        this.frienduin = other.frienduin;
      }
      if (other.isSetMsg()) {
        this.msg = other.msg;
      }
    }

    public sendMsg_args deepCopy() {
      return new sendMsg_args(this);
    }

    @Override
    public void clear() {
      this.frienduin = null;
      this.msg = null;
    }

    public String getFrienduin() {
      return this.frienduin;
    }

    public sendMsg_args setFrienduin(String frienduin) {
      this.frienduin = frienduin;
      return this;
    }

    public void unsetFrienduin() {
      this.frienduin = null;
    }

    /** Returns true if field frienduin is set (has been assigned a value) and false otherwise */
    public boolean isSetFrienduin() {
      return this.frienduin != null;
    }

    public void setFrienduinIsSet(boolean value) {
      if (!value) {
        this.frienduin = null;
      }
    }

    public String getMsg() {
      return this.msg;
    }

    public sendMsg_args setMsg(String msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FRIENDUIN:
        if (value == null) {
          unsetFrienduin();
        } else {
          setFrienduin((String)value);
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FRIENDUIN:
        return getFrienduin();

      case MSG:
        return getMsg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FRIENDUIN:
        return isSetFrienduin();
      case MSG:
        return isSetMsg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMsg_args)
        return this.equals((sendMsg_args)that);
      return false;
    }

    public boolean equals(sendMsg_args that) {
      if (that == null)
        return false;

      boolean this_present_frienduin = true && this.isSetFrienduin();
      boolean that_present_frienduin = true && that.isSetFrienduin();
      if (this_present_frienduin || that_present_frienduin) {
        if (!(this_present_frienduin && that_present_frienduin))
          return false;
        if (!this.frienduin.equals(that.frienduin))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFrienduin()) ? 131071 : 524287);
      if (isSetFrienduin())
        hashCode = hashCode * 8191 + frienduin.hashCode();

      hashCode = hashCode * 8191 + ((isSetMsg()) ? 131071 : 524287);
      if (isSetMsg())
        hashCode = hashCode * 8191 + msg.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendMsg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFrienduin()).compareTo(other.isSetFrienduin());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFrienduin()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frienduin, other.frienduin);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMsg_args(");
      boolean first = true;

      sb.append("frienduin:");
      if (this.frienduin == null) {
        sb.append("null");
      } else {
        sb.append(this.frienduin);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendMsg_argsStandardSchemeFactory implements SchemeFactory {
      public sendMsg_argsStandardScheme getScheme() {
        return new sendMsg_argsStandardScheme();
      }
    }

    private static class sendMsg_argsStandardScheme extends StandardScheme<sendMsg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMsg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FRIENDUIN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.frienduin = iprot.readString();
                struct.setFrienduinIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.msg = iprot.readString();
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMsg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.frienduin != null) {
          oprot.writeFieldBegin(FRIENDUIN_FIELD_DESC);
          oprot.writeString(struct.frienduin);
          oprot.writeFieldEnd();
        }
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMsg_argsTupleSchemeFactory implements SchemeFactory {
      public sendMsg_argsTupleScheme getScheme() {
        return new sendMsg_argsTupleScheme();
      }
    }

    private static class sendMsg_argsTupleScheme extends TupleScheme<sendMsg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMsg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFrienduin()) {
          optionals.set(0);
        }
        if (struct.isSetMsg()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFrienduin()) {
          oprot.writeString(struct.frienduin);
        }
        if (struct.isSetMsg()) {
          oprot.writeString(struct.msg);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMsg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.frienduin = iprot.readString();
          struct.setFrienduinIsSet(true);
        }
        if (incoming.get(1)) {
          struct.msg = iprot.readString();
          struct.setMsgIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendMsg_result implements org.apache.thrift.TBase<sendMsg_result, sendMsg_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendMsg_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMsg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new sendMsg_resultStandardSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new sendMsg_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL          , "boolean")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMsg_result.class, metaDataMap);
    }

    public sendMsg_result() {
    }

    public sendMsg_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMsg_result(sendMsg_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public sendMsg_result deepCopy() {
      return new sendMsg_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public sendMsg_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMsg_result)
        return this.equals((sendMsg_result)that);
      return false;
    }

    public boolean equals(sendMsg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(sendMsg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMsg_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendMsg_resultStandardSchemeFactory implements SchemeFactory {
      public sendMsg_resultStandardScheme getScheme() {
        return new sendMsg_resultStandardScheme();
      }
    }

    private static class sendMsg_resultStandardScheme extends StandardScheme<sendMsg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMsg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMsg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMsg_resultTupleSchemeFactory implements SchemeFactory {
      public sendMsg_resultTupleScheme getScheme() {
        return new sendMsg_resultTupleScheme();
      }
    }

    private static class sendMsg_resultTupleScheme extends TupleScheme<sendMsg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMsg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMsg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getNickName_args implements org.apache.thrift.TBase<getNickName_args, getNickName_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNickName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNickName_args");

    private static final org.apache.thrift.protocol.TField SELFUIN_FIELD_DESC = new org.apache.thrift.protocol.TField("selfuin", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SENDERUIN_FIELD_DESC = new org.apache.thrift.protocol.TField("senderuin", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FRIENDUIN_FIELD_DESC = new org.apache.thrift.protocol.TField("frienduin", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new getNickName_argsStandardSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new getNickName_argsTupleSchemeFactory();

    public String selfuin; // required
    public String senderuin; // required
    public String frienduin; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SELFUIN((short)1, "selfuin"),
      SENDERUIN((short)2, "senderuin"),
      FRIENDUIN((short)3, "frienduin");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SELFUIN
            return SELFUIN;
          case 2: // SENDERUIN
            return SENDERUIN;
          case 3: // FRIENDUIN
            return FRIENDUIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SELFUIN, new org.apache.thrift.meta_data.FieldMetaData("selfuin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.SENDERUIN, new org.apache.thrift.meta_data.FieldMetaData("senderuin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.FRIENDUIN, new org.apache.thrift.meta_data.FieldMetaData("frienduin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNickName_args.class, metaDataMap);
    }

    public getNickName_args() {
    }

    public getNickName_args(
      String selfuin,
      String senderuin,
      String frienduin)
    {
      this();
      this.selfuin = selfuin;
      this.senderuin = senderuin;
      this.frienduin = frienduin;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNickName_args(getNickName_args other) {
      if (other.isSetSelfuin()) {
        this.selfuin = other.selfuin;
      }
      if (other.isSetSenderuin()) {
        this.senderuin = other.senderuin;
      }
      if (other.isSetFrienduin()) {
        this.frienduin = other.frienduin;
      }
    }

    public getNickName_args deepCopy() {
      return new getNickName_args(this);
    }

    @Override
    public void clear() {
      this.selfuin = null;
      this.senderuin = null;
      this.frienduin = null;
    }

    public String getSelfuin() {
      return this.selfuin;
    }

    public getNickName_args setSelfuin(String selfuin) {
      this.selfuin = selfuin;
      return this;
    }

    public void unsetSelfuin() {
      this.selfuin = null;
    }

    /** Returns true if field selfuin is set (has been assigned a value) and false otherwise */
    public boolean isSetSelfuin() {
      return this.selfuin != null;
    }

    public void setSelfuinIsSet(boolean value) {
      if (!value) {
        this.selfuin = null;
      }
    }

    public String getSenderuin() {
      return this.senderuin;
    }

    public getNickName_args setSenderuin(String senderuin) {
      this.senderuin = senderuin;
      return this;
    }

    public void unsetSenderuin() {
      this.senderuin = null;
    }

    /** Returns true if field senderuin is set (has been assigned a value) and false otherwise */
    public boolean isSetSenderuin() {
      return this.senderuin != null;
    }

    public void setSenderuinIsSet(boolean value) {
      if (!value) {
        this.senderuin = null;
      }
    }

    public String getFrienduin() {
      return this.frienduin;
    }

    public getNickName_args setFrienduin(String frienduin) {
      this.frienduin = frienduin;
      return this;
    }

    public void unsetFrienduin() {
      this.frienduin = null;
    }

    /** Returns true if field frienduin is set (has been assigned a value) and false otherwise */
    public boolean isSetFrienduin() {
      return this.frienduin != null;
    }

    public void setFrienduinIsSet(boolean value) {
      if (!value) {
        this.frienduin = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SELFUIN:
        if (value == null) {
          unsetSelfuin();
        } else {
          setSelfuin((String)value);
        }
        break;

      case SENDERUIN:
        if (value == null) {
          unsetSenderuin();
        } else {
          setSenderuin((String)value);
        }
        break;

      case FRIENDUIN:
        if (value == null) {
          unsetFrienduin();
        } else {
          setFrienduin((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SELFUIN:
        return getSelfuin();

      case SENDERUIN:
        return getSenderuin();

      case FRIENDUIN:
        return getFrienduin();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SELFUIN:
        return isSetSelfuin();
      case SENDERUIN:
        return isSetSenderuin();
      case FRIENDUIN:
        return isSetFrienduin();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNickName_args)
        return this.equals((getNickName_args)that);
      return false;
    }

    public boolean equals(getNickName_args that) {
      if (that == null)
        return false;

      boolean this_present_selfuin = true && this.isSetSelfuin();
      boolean that_present_selfuin = true && that.isSetSelfuin();
      if (this_present_selfuin || that_present_selfuin) {
        if (!(this_present_selfuin && that_present_selfuin))
          return false;
        if (!this.selfuin.equals(that.selfuin))
          return false;
      }

      boolean this_present_senderuin = true && this.isSetSenderuin();
      boolean that_present_senderuin = true && that.isSetSenderuin();
      if (this_present_senderuin || that_present_senderuin) {
        if (!(this_present_senderuin && that_present_senderuin))
          return false;
        if (!this.senderuin.equals(that.senderuin))
          return false;
      }

      boolean this_present_frienduin = true && this.isSetFrienduin();
      boolean that_present_frienduin = true && that.isSetFrienduin();
      if (this_present_frienduin || that_present_frienduin) {
        if (!(this_present_frienduin && that_present_frienduin))
          return false;
        if (!this.frienduin.equals(that.frienduin))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSelfuin()) ? 131071 : 524287);
      if (isSetSelfuin())
        hashCode = hashCode * 8191 + selfuin.hashCode();

      hashCode = hashCode * 8191 + ((isSetSenderuin()) ? 131071 : 524287);
      if (isSetSenderuin())
        hashCode = hashCode * 8191 + senderuin.hashCode();

      hashCode = hashCode * 8191 + ((isSetFrienduin()) ? 131071 : 524287);
      if (isSetFrienduin())
        hashCode = hashCode * 8191 + frienduin.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getNickName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSelfuin()).compareTo(other.isSetSelfuin());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSelfuin()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selfuin, other.selfuin);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSenderuin()).compareTo(other.isSetSenderuin());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSenderuin()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senderuin, other.senderuin);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFrienduin()).compareTo(other.isSetFrienduin());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFrienduin()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frienduin, other.frienduin);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNickName_args(");
      boolean first = true;

      sb.append("selfuin:");
      if (this.selfuin == null) {
        sb.append("null");
      } else {
        sb.append(this.selfuin);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("senderuin:");
      if (this.senderuin == null) {
        sb.append("null");
      } else {
        sb.append(this.senderuin);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("frienduin:");
      if (this.frienduin == null) {
        sb.append("null");
      } else {
        sb.append(this.frienduin);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNickName_argsStandardSchemeFactory implements SchemeFactory {
      public getNickName_argsStandardScheme getScheme() {
        return new getNickName_argsStandardScheme();
      }
    }

    private static class getNickName_argsStandardScheme extends StandardScheme<getNickName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNickName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SELFUIN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.selfuin = iprot.readString();
                struct.setSelfuinIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SENDERUIN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.senderuin = iprot.readString();
                struct.setSenderuinIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FRIENDUIN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.frienduin = iprot.readString();
                struct.setFrienduinIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNickName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.selfuin != null) {
          oprot.writeFieldBegin(SELFUIN_FIELD_DESC);
          oprot.writeString(struct.selfuin);
          oprot.writeFieldEnd();
        }
        if (struct.senderuin != null) {
          oprot.writeFieldBegin(SENDERUIN_FIELD_DESC);
          oprot.writeString(struct.senderuin);
          oprot.writeFieldEnd();
        }
        if (struct.frienduin != null) {
          oprot.writeFieldBegin(FRIENDUIN_FIELD_DESC);
          oprot.writeString(struct.frienduin);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNickName_argsTupleSchemeFactory implements SchemeFactory {
      public getNickName_argsTupleScheme getScheme() {
        return new getNickName_argsTupleScheme();
      }
    }

    private static class getNickName_argsTupleScheme extends TupleScheme<getNickName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNickName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSelfuin()) {
          optionals.set(0);
        }
        if (struct.isSetSenderuin()) {
          optionals.set(1);
        }
        if (struct.isSetFrienduin()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSelfuin()) {
          oprot.writeString(struct.selfuin);
        }
        if (struct.isSetSenderuin()) {
          oprot.writeString(struct.senderuin);
        }
        if (struct.isSetFrienduin()) {
          oprot.writeString(struct.frienduin);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNickName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.selfuin = iprot.readString();
          struct.setSelfuinIsSet(true);
        }
        if (incoming.get(1)) {
          struct.senderuin = iprot.readString();
          struct.setSenderuinIsSet(true);
        }
        if (incoming.get(2)) {
          struct.frienduin = iprot.readString();
          struct.setFrienduinIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getNickName_result implements org.apache.thrift.TBase<getNickName_result, getNickName_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNickName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNickName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new getNickName_resultStandardSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new getNickName_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNickName_result.class, metaDataMap);
    }

    public getNickName_result() {
    }

    public getNickName_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNickName_result(getNickName_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getNickName_result deepCopy() {
      return new getNickName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getNickName_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNickName_result)
        return this.equals((getNickName_result)that);
      return false;
    }

    public boolean equals(getNickName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getNickName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNickName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNickName_resultStandardSchemeFactory implements SchemeFactory {
      public getNickName_resultStandardScheme getScheme() {
        return new getNickName_resultStandardScheme();
      }
    }

    private static class getNickName_resultStandardScheme extends StandardScheme<getNickName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNickName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNickName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNickName_resultTupleSchemeFactory implements SchemeFactory {
      public getNickName_resultTupleScheme getScheme() {
        return new getNickName_resultTupleScheme();
      }
    }

    private static class getNickName_resultTupleScheme extends TupleScheme<getNickName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNickName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNickName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
